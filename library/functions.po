# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2018, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-23 20:52+0800\n"
"PO-Revision-Date: 2018-10-04 17:44+0800\n"
"Last-Translator: Adrian Liaw <adrianliaw2000@gmail.com>\n"
"Language-Team: Chinese - TAIWAN (https://github.com/python/python-docs-zh-"
"tw)\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 2.1.1\n"

#: ../../library/functions.rst:5 ../../library/functions.rst:11
msgid "Built-in Functions"
msgstr "內建函式"

#: ../../library/functions.rst:7
msgid ""
"The Python interpreter has a number of functions and types built into it "
"that are always available.  They are listed here in alphabetical order."
msgstr ""
"Python 直譯器有內建數十個函式，隨時都可以使用這些函式。以下按照英文字母排序列"
"出。"

#: ../../library/functions.rst:13
msgid ":func:`abs`"
msgstr ":func:`abs`"

#: ../../library/functions.rst:13
msgid ":func:`delattr`"
msgstr ":func:`delattr`"

#: ../../library/functions.rst:13
msgid ":func:`hash`"
msgstr ":func:`hash`"

#: ../../library/functions.rst:13
msgid "|func-memoryview|_"
msgstr "|func-memoryview|_"

#: ../../library/functions.rst:13
msgid "|func-set|_"
msgstr "|func-set|_"

#: ../../library/functions.rst:14
msgid ":func:`all`"
msgstr ":func:`all`"

#: ../../library/functions.rst:14
msgid "|func-dict|_"
msgstr "|func-dict|_"

#: ../../library/functions.rst:14
msgid ":func:`help`"
msgstr ":func:`help`"

#: ../../library/functions.rst:14
msgid ":func:`min`"
msgstr ":func:`min`"

#: ../../library/functions.rst:14
msgid ":func:`setattr`"
msgstr ":func:`setattr`"

#: ../../library/functions.rst:15
msgid ":func:`any`"
msgstr ":func:`any`"

#: ../../library/functions.rst:15
msgid ":func:`dir`"
msgstr ":func:`dir`"

#: ../../library/functions.rst:15
msgid ":func:`hex`"
msgstr ":func:`hex`"

#: ../../library/functions.rst:15
msgid ":func:`next`"
msgstr ":func:`next`"

#: ../../library/functions.rst:15
msgid ":func:`slice`"
msgstr ":func:`slice`"

#: ../../library/functions.rst:16
msgid ":func:`ascii`"
msgstr ":func:`ascii`"

#: ../../library/functions.rst:16
msgid ":func:`divmod`"
msgstr ":func:`divmod`"

#: ../../library/functions.rst:16
msgid ":func:`id`"
msgstr ":func:`id`"

#: ../../library/functions.rst:16
msgid ":func:`object`"
msgstr ":func:`object`"

#: ../../library/functions.rst:16
msgid ":func:`sorted`"
msgstr ":func:`sorted`"

#: ../../library/functions.rst:17
msgid ":func:`bin`"
msgstr ":func:`bin`"

#: ../../library/functions.rst:17
msgid ":func:`enumerate`"
msgstr ":func:`enumerate`"

#: ../../library/functions.rst:17
msgid ":func:`input`"
msgstr ":func:`input`"

#: ../../library/functions.rst:17
msgid ":func:`oct`"
msgstr ":func:`oct`"

#: ../../library/functions.rst:17
msgid ":func:`staticmethod`"
msgstr ":func:`staticmethod`"

#: ../../library/functions.rst:18
msgid ":func:`bool`"
msgstr ":func:`bool`"

#: ../../library/functions.rst:18
msgid ":func:`eval`"
msgstr ":func:`eval`"

#: ../../library/functions.rst:18
msgid ":func:`int`"
msgstr ":func:`int`"

#: ../../library/functions.rst:18
msgid ":func:`open`"
msgstr ":func:`open`"

#: ../../library/functions.rst:18
msgid "|func-str|_"
msgstr "|func-str|_"

#: ../../library/functions.rst:19
msgid ":func:`breakpoint`"
msgstr ":func:`breakpoint`"

#: ../../library/functions.rst:19
msgid ":func:`exec`"
msgstr ":func:`exec`"

#: ../../library/functions.rst:19
msgid ":func:`isinstance`"
msgstr ":func:`isinstance`"

#: ../../library/functions.rst:19
msgid ":func:`ord`"
msgstr ":func:`ord`"

#: ../../library/functions.rst:19
msgid ":func:`sum`"
msgstr ":func:`sum`"

#: ../../library/functions.rst:20
msgid "|func-bytearray|_"
msgstr "|func-bytearray|_"

#: ../../library/functions.rst:20
msgid ":func:`filter`"
msgstr ":func:`filter`"

#: ../../library/functions.rst:20
msgid ":func:`issubclass`"
msgstr ":func:`issubclass`"

#: ../../library/functions.rst:20
msgid ":func:`pow`"
msgstr ":func:`pow`"

#: ../../library/functions.rst:20
msgid ":func:`super`"
msgstr ":func:`super`"

#: ../../library/functions.rst:21
msgid "|func-bytes|_"
msgstr "|func-bytes|_"

#: ../../library/functions.rst:21
msgid ":func:`float`"
msgstr ":func:`float`"

#: ../../library/functions.rst:21
msgid ":func:`iter`"
msgstr ":func:`iter`"

#: ../../library/functions.rst:21
msgid ":func:`print`"
msgstr ":func:`print`"

#: ../../library/functions.rst:21
msgid "|func-tuple|_"
msgstr "|func-tuple|_"

#: ../../library/functions.rst:22
msgid ":func:`callable`"
msgstr ":func:`callable`"

#: ../../library/functions.rst:22
msgid ":func:`format`"
msgstr ":func:`format`"

#: ../../library/functions.rst:22
msgid ":func:`len`"
msgstr ":func:`len`"

#: ../../library/functions.rst:22
msgid ":func:`property`"
msgstr ":func:`property`"

#: ../../library/functions.rst:22
msgid ":func:`type`"
msgstr ":func:`type`"

#: ../../library/functions.rst:23
msgid ":func:`chr`"
msgstr ":func:`chr`"

#: ../../library/functions.rst:23
msgid "|func-frozenset|_"
msgstr "|func-frozenset|_"

#: ../../library/functions.rst:23
msgid "|func-list|_"
msgstr "|func-list|_"

#: ../../library/functions.rst:23
msgid "|func-range|_"
msgstr "|func-range|_"

#: ../../library/functions.rst:23
msgid ":func:`vars`"
msgstr ":func:`vars`"

#: ../../library/functions.rst:24
msgid ":func:`classmethod`"
msgstr ":func:`classmethod`"

#: ../../library/functions.rst:24
msgid ":func:`getattr`"
msgstr ":func:`getattr`"

#: ../../library/functions.rst:24
msgid ":func:`locals`"
msgstr ":func:`locals`"

#: ../../library/functions.rst:24
msgid ":func:`repr`"
msgstr ":func:`repr`"

#: ../../library/functions.rst:24
msgid ":func:`zip`"
msgstr ":func:`zip`"

#: ../../library/functions.rst:25
msgid ":func:`compile`"
msgstr ":func:`compile`"

#: ../../library/functions.rst:25
msgid ":func:`globals`"
msgstr ":func:`globals`"

#: ../../library/functions.rst:25
msgid ":func:`map`"
msgstr ":func:`map`"

#: ../../library/functions.rst:25
msgid ":func:`reversed`"
msgstr ":func:`reversed`"

#: ../../library/functions.rst:25
msgid ":func:`__import__`"
msgstr ":func:`__import__`"

#: ../../library/functions.rst:26
msgid ":func:`complex`"
msgstr ":func:`complex`"

#: ../../library/functions.rst:26
msgid ":func:`hasattr`"
msgstr ":func:`hasattr`"

#: ../../library/functions.rst:26
msgid ":func:`max`"
msgstr ":func:`max`"

#: ../../library/functions.rst:26
msgid ":func:`round`"
msgstr ":func:`round`"

#: ../../library/functions.rst:45
msgid ""
"Return the absolute value of a number.  The argument may be an integer or a "
"floating point number.  If the argument is a complex number, its magnitude "
"is returned."
msgstr ""
"返回一個數的絕對值。引數可以是整數或浮點數。如果引數是一個複數，返回它的純量"
"(大小)。"

#: ../../library/functions.rst:52
msgid ""
"Return ``True`` if all elements of the *iterable* are true (or if the "
"iterable is empty).  Equivalent to::"
msgstr ""
"如果 *iterable* 的所有元素皆為 True（或 iterable 為空），返回 ``True`` 。等價"
"於：\n"
"\n"
"::"

#: ../../library/functions.rst:64
msgid ""
"Return ``True`` if any element of the *iterable* is true.  If the iterable "
"is empty, return ``False``.  Equivalent to::"
msgstr ""
"如果 *iterable* 的任一元素為 True，返回 ``True`` 。如果 iterable 為空，返回 "
"``False``。等價於：\n"
"\n"
"::"

#: ../../library/functions.rst:76
msgid ""
"As :func:`repr`, return a string containing a printable representation of an "
"object, but escape the non-ASCII characters in the string returned by :func:"
"`repr` using ``\\x``, ``\\u`` or ``\\U`` escapes.  This generates a string "
"similar to that returned by :func:`repr` in Python 2."
msgstr ""
"就像函式 :func:`repr`，返回一個表示物件的字串，但是 :func:`repr` 返回的字串中"
"非 ASCII 編碼的字元，會使用 ``\\x``、``\\u`` 和 ``\\U`` 來取代。這個函式生成"
"的字串和 Python 2 的 :func:`repr` 返回的結果相似。"

#: ../../library/functions.rst:84
msgid ""
"Convert an integer number to a binary string prefixed with \"0b\". The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`__index__` method that returns an "
"integer. Some examples:"
msgstr ""
"將一個整數轉變為一個前綴為 “0b”的二進位制字串。結果是一個合法的 Python 表示"
"式。如果 *x* 不是 Python 的 :class:`int` 物件，那它需要定義 :meth:"
"`__index__` 方法返回一個整數。一些例子："

#: ../../library/functions.rst:94
msgid ""
"If prefix \"0b\" is desired or not, you can use either of the following ways."
msgstr "如果不一定需要字首「0b」，還可以使用如下的方法。"

#: ../../library/functions.rst:101 ../../library/functions.rst:699
#: ../../library/functions.rst:957
msgid "See also :func:`format` for more information."
msgstr "可參考 :func:`format` 獲取更多資訊。"

#: ../../library/functions.rst:106
msgid ""
"Return a Boolean value, i.e. one of ``True`` or ``False``.  *x* is converted "
"using the standard :ref:`truth testing procedure <truth>`.  If *x* is false "
"or omitted, this returns ``False``; otherwise it returns ``True``.  The :"
"class:`bool` class is a subclass of :class:`int` (see :ref:`typesnumeric`). "
"It cannot be subclassed further.  Its only instances are ``False`` and "
"``True`` (see :ref:`bltin-boolean-values`)."
msgstr ""
"返回一個布林值，即 ``True`` 或者 ``False``。 *x* 使用標準的 :ref:`真值測試過"
"程 <truth>` 來轉換。如果 *x* 是假的或者被省略，返回 ``False``；其他情況返回 "
"``True``。:class:`bool` 類別是 :class:`int` 的子類別（參見 :ref:"
"`typesnumeric`）。其他類別不能繼承自它。它只有 ``False`` 和 ``True`` 兩個實例"
"（參見 :ref:`bltin-boolean-values`）。"

#: ../../library/functions.rst:115 ../../library/functions.rst:582
#: ../../library/functions.rst:770
msgid "*x* is now a positional-only parameter."
msgstr ""

#: ../../library/functions.rst:120
msgid ""
"This function drops you into the debugger at the call site.  Specifically, "
"it calls :func:`sys.breakpointhook`, passing ``args`` and ``kws`` straight "
"through.  By default, ``sys.breakpointhook()`` calls :func:`pdb.set_trace()` "
"expecting no arguments.  In this case, it is purely a convenience function "
"so you don't have to explicitly import :mod:`pdb` or type as much code to "
"enter the debugger.  However, :func:`sys.breakpointhook` can be set to some "
"other function and :func:`breakpoint` will automatically call that, allowing "
"you to drop into the debugger of choice."
msgstr ""

#: ../../library/functions.rst:136
msgid ""
"Return a new array of bytes.  The :class:`bytearray` class is a mutable "
"sequence of integers in the range 0 <= x < 256.  It has most of the usual "
"methods of mutable sequences, described in :ref:`typesseq-mutable`, as well "
"as most methods that the :class:`bytes` type has, see :ref:`bytes-methods`."
msgstr ""
"返回一個新的 bytes 陣列。 :class:`bytearray` 類別是一個可變的整數序列，包含範"
"圍為 0 <= x < 256 的整數。它有可變序列大部分常見的方法，參見 :ref:`typesseq-"
"mutable` 的描述，同時也有 :class:`bytes` 型別大部分的方法，參見 :ref:`bytes-"
"methods`。"

#: ../../library/functions.rst:141
msgid ""
"The optional *source* parameter can be used to initialize the array in a few "
"different ways:"
msgstr "選擇性參數 *source* 可以被用來以不同的方式初始化陣列："

#: ../../library/functions.rst:144
msgid ""
"If it is a *string*, you must also give the *encoding* (and optionally, "
"*errors*) parameters; :func:`bytearray` then converts the string to bytes "
"using :meth:`str.encode`."
msgstr ""
"如果是一個 *string*，你必須提供 *encoding* 引數（以及選擇性地 *errors* ）；:"
"func:`bytearray` 會使用 :meth:`str.encode` 方法來將 string 轉變成 bytes。"

#: ../../library/functions.rst:148
msgid ""
"If it is an *integer*, the array will have that size and will be initialized "
"with null bytes."
msgstr ""
"如果是一個 *integer*，陣列的長度即為整數，並以 null bytes 來當作初始值。"

#: ../../library/functions.rst:151
msgid ""
"If it is an object conforming to the *buffer* interface, a read-only buffer "
"of the object will be used to initialize the bytes array."
msgstr ""
"如果參數是一個符合 *buffer* 介面的物件，該物件的唯讀 buffer 會被用來初始化 "
"bytes 陣列。"

#: ../../library/functions.rst:154
msgid ""
"If it is an *iterable*, it must be an iterable of integers in the range ``0 "
"<= x < 256``, which are used as the initial contents of the array."
msgstr ""
"如果參數是一個 *iterable* ，它的元素的範圍必須是 ``0 <= x < 256`` 的整數，並"
"且會被用作陣列的初始值。"

#: ../../library/functions.rst:157
msgid "Without an argument, an array of size 0 is created."
msgstr "如果沒有引數，則建立長度為 0 的陣列。"

#: ../../library/functions.rst:159
msgid "See also :ref:`binaryseq` and :ref:`typebytearray`."
msgstr "可參考 :ref:`binaryseq` 和 :ref:`typebytearray`。"

#: ../../library/functions.rst:166
msgid ""
"Return a new \"bytes\" object, which is an immutable sequence of integers in "
"the range ``0 <= x < 256``.  :class:`bytes` is an immutable version of :"
"class:`bytearray` -- it has the same non-mutating methods and the same "
"indexing and slicing behavior."
msgstr ""
"返回一個新的 “bytes” 物件，會是一個不可變序列，包含範圍為 ``0 <= x < 256`` 的"
"整數。:class:`bytes` 是 :class:`bytearray` 的不可變版本 — 它具備和不變序列相"
"同的方法和相同的索引、切片操作。"

#: ../../library/functions.rst:171
msgid ""
"Accordingly, constructor arguments are interpreted as for :func:`bytearray`."
msgstr "因此，建構函式的引數和 :func:`bytearray` 相同。"

#: ../../library/functions.rst:173
msgid "Bytes objects can also be created with literals, see :ref:`strings`."
msgstr "Bytes 物件還可以用文字建立，參見 :ref:`strings`。"

#: ../../library/functions.rst:175
msgid "See also :ref:`binaryseq`, :ref:`typebytes`, and :ref:`bytes-methods`."
msgstr "可參考 :ref:`binaryseq`，:ref:`typebytes` 和 :ref:`bytes-methods`。"

#: ../../library/functions.rst:180
msgid ""
"Return :const:`True` if the *object* argument appears callable, :const:"
"`False` if not.  If this returns true, it is still possible that a call "
"fails, but if it is false, calling *object* will never succeed. Note that "
"classes are callable (calling a class returns a new instance); instances are "
"callable if their class has a :meth:`__call__` method."
msgstr ""
"如果引數 *object* 是可呼叫的，返回 :const:`True`，否則返回 :const:`False`。如"
"果返回 True，呼叫仍可能會失敗；但如果返回 False，則呼叫 *object* 肯定會失敗。"
"注意類別是可呼叫的（呼叫類別會返回一個新的實例）。如果實例的類別有定義 :meth:"
"`__call__` 方法，則它是可呼叫。"

#: ../../library/functions.rst:186
msgid ""
"This function was first removed in Python 3.0 and then brought back in "
"Python 3.2."
msgstr "這個函式一開始在 Python 3.0 被移除，但在 Python 3.2 又被重新加入。"

#: ../../library/functions.rst:193
msgid ""
"Return the string representing a character whose Unicode code point is the "
"integer *i*.  For example, ``chr(97)`` returns the string ``'a'``, while "
"``chr(8364)`` returns the string ``'€'``. This is the inverse of :func:`ord`."
msgstr ""
"返回代表整數 *i* 的 Unicode 字串。例如，``chr(97)`` 返回字串 ``'a'``，而 "
"``chr(8364)`` 返回字串 ``'€'``。這是 :func:`ord` 的逆函式。"

#: ../../library/functions.rst:197
msgid ""
"The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in "
"base 16).  :exc:`ValueError` will be raised if *i* is outside that range."
msgstr ""
"引數的合法範圍是 0 到 1,114,111（16 進制表示為 0x10FFFF）。如果 *i* 超過這個"
"範圍，會觸發 :exc:`ValueError` 異常。"

#: ../../library/functions.rst:203
msgid "Transform a method into a class method."
msgstr "把一個方法封裝成類別方法。"

#: ../../library/functions.rst:205
msgid ""
"A class method receives the class as implicit first argument, just like an "
"instance method receives the instance. To declare a class method, use this "
"idiom::"
msgstr ""
"一個類別方法把自己的類別作為第一個引數，就像一個實例方法把實例自己作為第一個"
"引數。請用以下習慣來宣告類別方法：\n"
"\n"
"::"

#: ../../library/functions.rst:213
msgid ""
"The ``@classmethod`` form is a function :term:`decorator` -- see the "
"description of function definitions in :ref:`function` for details."
msgstr ""
"``@classmethod`` 語法是一個函式 :term:`decorator` —  參見 :ref:`function` 中"
"關於函式定義的詳細介紹。"

#: ../../library/functions.rst:216
msgid ""
"It can be called either on the class (such as ``C.f()``) or on an instance "
"(such as ``C().f()``).  The instance is ignored except for its class. If a "
"class method is called for a derived class, the derived class object is "
"passed as the implied first argument."
msgstr ""
"它可以同時被類別（如 ``C.f()``）和實例（如 ``C().f()``）呼叫。實例除了它的類"
"別資訊，其他都會被忽略。如果一個類別方法在子類別上呼叫，子類別會作為第一個引"
"數傳入。"

#: ../../library/functions.rst:221
msgid ""
"Class methods are different than C++ or Java static methods. If you want "
"those, see :func:`staticmethod` in this section."
msgstr ""
"類別方法和 C++ 和 Java 的靜態方法是有區別的。如果你想瞭解靜態方法，請看本節"
"的 :func:`staticmethod`。"

#: ../../library/functions.rst:224
msgid ""
"For more information on class methods, consult the documentation on the "
"standard type hierarchy in :ref:`types`."
msgstr "關於類別方法的更多資訊，請參考文件 :ref:`types` 中的標準型別的階層。"

#: ../../library/functions.rst:230
msgid ""
"Compile the *source* into a code or AST object.  Code objects can be "
"executed by :func:`exec` or :func:`eval`.  *source* can either be a normal "
"string, a byte string, or an AST object.  Refer to the :mod:`ast` module "
"documentation for information on how to work with AST objects."
msgstr ""
"將 *source* 編譯成程式碼或 AST 物件。程式碼物件可以被 :func:`exec` 或 :func:"
"`eval` 執行。*source* 可以是常規的字串、bytes 字串，或者 AST 物件。參見 :mod:"
"`ast` 模組的文件瞭解如何使用 AST 物件。"

#: ../../library/functions.rst:235
msgid ""
"The *filename* argument should give the file from which the code was read; "
"pass some recognizable value if it wasn't read from a file (``'<string>'`` "
"is commonly used)."
msgstr ""
"*filename* 引數必須是程式碼的檔名；如果程式碼不從檔案中讀取，可以傳入一些可辨"
"識的值（經常會使用 ``'<string>'`` 來替代）。"

#: ../../library/functions.rst:239
msgid ""
"The *mode* argument specifies what kind of code must be compiled; it can be "
"``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if "
"it consists of a single expression, or ``'single'`` if it consists of a "
"single interactive statement (in the latter case, expression statements that "
"evaluate to something other than ``None`` will be printed)."
msgstr ""
"*mode* 引數指定了編譯程式碼時必須用的模式。如果 *source* 是語句序列，可以是 "
"``'exec'``；如果是單一表達式，可以是 ``'eval'``；如果是單個互動式語句，可以"
"是 ``'single'``。（在最後一種情況下，如果表示式執行結果不是 ``None`` 將會被打"
"印出來。）"

#: ../../library/functions.rst:245
msgid ""
"The optional arguments *flags* and *dont_inherit* control which :ref:`future "
"statements <future>` affect the compilation of *source*.  If neither is "
"present (or both are zero) the code is compiled with those future statements "
"that are in effect in the code that is calling :func:`compile`.  If the "
"*flags* argument is given and *dont_inherit* is not (or is zero) then the "
"future statements specified by the *flags* argument are used in addition to "
"those that would be used anyway. If *dont_inherit* is a non-zero integer "
"then the *flags* argument is it -- the future statements in effect around "
"the call to compile are ignored."
msgstr ""

#: ../../library/functions.rst:255
msgid ""
"Future statements are specified by bits which can be bitwise ORed together "
"to specify multiple statements.  The bitfield required to specify a given "
"feature can be found as the :attr:`~__future__._Feature.compiler_flag` "
"attribute on the :class:`~__future__._Feature` instance in the :mod:"
"`__future__` module."
msgstr ""
"Future 陳述式使用 bits 來指定，可以一起被位元操作 ORed 來指定複數的語句。需要"
"被具體定義特徵的位元域可以通過 :mod:`__future__` 模組中的 :class:"
"`~__future__._Feature` 類別實例中的 :attr:`~__future__._Feature."
"compiler_flag` 屬性來獲得。"

#: ../../library/functions.rst:260
msgid ""
"The argument *optimize* specifies the optimization level of the compiler; "
"the default value of ``-1`` selects the optimization level of the "
"interpreter as given by :option:`-O` options.  Explicit levels are ``0`` (no "
"optimization; ``__debug__`` is true), ``1`` (asserts are removed, "
"``__debug__`` is false) or ``2`` (docstrings are removed too)."
msgstr ""
"引數 *optimize* 用來指定編譯器的最佳化級別；預設值 ``-1`` 選擇與直譯器的 :"
"option:`-O` 選項相同的最佳化級別。其他級別為 ``0`` （沒有最佳化；"
"``__debug__`` 為 True）、``1`` （斷言被刪除， ``__debug__`` 為 False）或 "
"``2`` （文件字串也被刪除）。"

#: ../../library/functions.rst:266
msgid ""
"This function raises :exc:`SyntaxError` if the compiled source is invalid, "
"and :exc:`ValueError` if the source contains null bytes."
msgstr ""
"如果編譯的原始碼不合法，此函式會觸發 :exc:`SyntaxError` 異常；如果原始碼包含 "
"null bytes，則會觸發 :exc:`ValueError` 異常。"

#: ../../library/functions.rst:269
msgid ""
"If you want to parse Python code into its AST representation, see :func:`ast."
"parse`."
msgstr "如果您想解析 Python 程式碼為 AST 表示式，請參閱 :func:`ast.parse`。"

#: ../../library/functions.rst:274
msgid ""
"When compiling a string with multi-line code in ``'single'`` or ``'eval'`` "
"mode, input must be terminated by at least one newline character.  This is "
"to facilitate detection of incomplete and complete statements in the :mod:"
"`code` module."
msgstr ""
"在 ``'single'`` 或 ``'eval'`` 模式編譯多行程式碼時，輸入必須以至少一個換行符"
"結尾。 這使 :mod:`code` 模組更容易檢測語句的完整性。"

#: ../../library/functions.rst:281
msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string when compiling to an AST object due to stack depth "
"limitations in Python's AST compiler."
msgstr ""
"如果編譯足夠大或者足夠複雜的字串成 AST 物件時，Python 直譯器會因為 Python "
"AST 編譯器的 stack 深度限制而崩潰。"

#: ../../library/functions.rst:285
msgid ""
"Allowed use of Windows and Mac newlines.  Also input in ``'exec'`` mode does "
"not have to end in a newline anymore.  Added the *optimize* parameter."
msgstr ""
"允許使用 Windows 和 Mac 的換行符號。在 ``'exec'`` 模式不需要以換行符號結尾。"
"增加了 *optimize* 參數。"

#: ../../library/functions.rst:289
msgid ""
"Previously, :exc:`TypeError` was raised when null bytes were encountered in "
"*source*."
msgstr ""
"在之前的版本，*source* 中包含 null bytes 會觸發 :exc:`TypeError` 異常。"

#: ../../library/functions.rst:296
msgid ""
"Return a complex number with the value *real* + *imag*\\*1j or convert a "
"string or number to a complex number.  If the first parameter is a string, "
"it will be interpreted as a complex number and the function must be called "
"without a second parameter.  The second parameter can never be a string. "
"Each argument may be any numeric type (including complex).  If *imag* is "
"omitted, it defaults to zero and the constructor serves as a numeric "
"conversion like :class:`int` and :class:`float`.  If both arguments are "
"omitted, returns ``0j``."
msgstr ""
"返回值為 *real* + *imag*\\*1j 的複數，或將字串、數字轉換為複數。如果第一個引"
"數是字串，則它被視為一個複數，並且函式呼叫時必須沒有第二個引數。第二個引數絕"
"對不能是字串。每個引數都可以是任意的數值型別（包括複數）。如果省略了 *imag*，"
"則預設值為零，建構函式會像 :class:`int` 和 :class:`float` 一樣進行數值轉換。"
"如果兩個引數都省略，則返回 ``0j``。"

#: ../../library/functions.rst:307
msgid ""
"When converting from a string, the string must not contain whitespace around "
"the central ``+`` or ``-`` operator.  For example, ``complex('1+2j')`` is "
"fine, but ``complex('1 + 2j')`` raises :exc:`ValueError`."
msgstr ""
"當從字串轉換時，字串在符號 ``+`` 或 ``-`` 的周圍必須不能有空格。例如 "
"``complex('1+2j')`` 是合法的，但 ``complex('1 + 2j')`` 會觸發 :exc:"
"`ValueError` 異常。"

#: ../../library/functions.rst:312
msgid "The complex type is described in :ref:`typesnumeric`."
msgstr "複數型別在 :ref:`typesnumeric` 中描述有相關描述。"

#: ../../library/functions.rst:312 ../../library/functions.rst:579
#: ../../library/functions.rst:767
msgid "Grouping digits with underscores as in code literals is allowed."
msgstr "可以使用下劃線 (underscores) 將程式碼文字中的數字進行分組。"

#: ../../library/functions.rst:320
msgid ""
"This is a relative of :func:`setattr`.  The arguments are an object and a "
"string.  The string must be the name of one of the object's attributes.  The "
"function deletes the named attribute, provided the object allows it.  For "
"example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``."
msgstr ""
"這是 :func:`setattr` 相關的函式。引數是一個物件和一個字串。該字串必須是物件中"
"某個屬性名稱。如果物件允許，該函式將刪除指定的屬性。例如 ``delattr(x, "
"'foobar')`` 等價於 ``del x.foobar``。"

#: ../../library/functions.rst:332
msgid ""
"Create a new dictionary.  The :class:`dict` object is the dictionary class. "
"See :class:`dict` and :ref:`typesmapping` for documentation about this class."
msgstr ""
"建立一個新的 dictionary（字典）。:class:`dict` 物件是一個 dictionary 類別。參"
"見 :class:`dict` 和 :ref:`typesmapping` 瞭解這個類別。"

#: ../../library/functions.rst:335
msgid ""
"For other containers see the built-in :class:`list`, :class:`set`, and :"
"class:`tuple` classes, as well as the :mod:`collections` module."
msgstr ""
"其他容器型別，請參見內建的 :class:`list`、:class:`set` 和 :class:`tuple` 類"
"別，以及 :mod:`collections` 模組。"

#: ../../library/functions.rst:341
msgid ""
"Without arguments, return the list of names in the current local scope.  "
"With an argument, attempt to return a list of valid attributes for that "
"object."
msgstr ""
"如果沒有引數，則返回當前本地作用域中的名稱列表。如果有引數，它會嘗試返回該物"
"件的有效屬性列表。"

#: ../../library/functions.rst:344
msgid ""
"If the object has a method named :meth:`__dir__`, this method will be called "
"and must return the list of attributes. This allows objects that implement a "
"custom :func:`__getattr__` or :func:`__getattribute__` function to customize "
"the way :func:`dir` reports their attributes."
msgstr ""
"如果物件有一個名為 :meth:`__dir__` 的方法，那麼該方法將被呼叫，並且必須返回一"
"個屬性列表。這允許實現自定義 :func:`__getattr__` 或 :func:`__getattribute__` "
"函式的物件能夠自定義 :func:`dir` 來報告它們的屬性。"

#: ../../library/functions.rst:349
msgid ""
"If the object does not provide :meth:`__dir__`, the function tries its best "
"to gather information from the object's :attr:`~object.__dict__` attribute, "
"if defined, and from its type object.  The resulting list is not necessarily "
"complete, and may be inaccurate when the object has a custom :func:"
"`__getattr__`."
msgstr ""
"如果物件不提供 :meth:`__dir__`，這個函式會嘗試從物件已定義的 :attr:`~object."
"__dict__` 屬性和型別物件收集資訊。結果列表並不總是完整的，如果物件有自定義 :"
"func:`__getattr__`，那結果可能不準確。"

#: ../../library/functions.rst:354
msgid ""
"The default :func:`dir` mechanism behaves differently with different types "
"of objects, as it attempts to produce the most relevant, rather than "
"complete, information:"
msgstr ""
"預設的 :func:`dir` 機制對不同型別的物件有不同行為，它會試圖返回最相關而不是最"
"全的資訊："

#: ../../library/functions.rst:358
msgid ""
"If the object is a module object, the list contains the names of the "
"module's attributes."
msgstr "如果物件是模組物件，則列表包含模組的屬性名稱。"

#: ../../library/functions.rst:361
msgid ""
"If the object is a type or class object, the list contains the names of its "
"attributes, and recursively of the attributes of its bases."
msgstr ""
"如果物件是型別或類別物件，則列表包含它們的屬性名稱，並且遞迴查詢其基礎類別的"
"所有屬性。"

#: ../../library/functions.rst:364
msgid ""
"Otherwise, the list contains the object's attributes' names, the names of "
"its class's attributes, and recursively of the attributes of its class's "
"base classes."
msgstr ""
"否則，列表包含物件的屬性名稱，它的類別屬性名稱，並且遞迴查詢它的類別的的所有"
"基礎類別的屬性。"

#: ../../library/functions.rst:368
msgid "The resulting list is sorted alphabetically.  For example:"
msgstr "返回的列表按字母表排序。例如："

#: ../../library/functions.rst:387
msgid ""
"Because :func:`dir` is supplied primarily as a convenience for use at an "
"interactive prompt, it tries to supply an interesting set of names more than "
"it tries to supply a rigorously or consistently defined set of names, and "
"its detailed behavior may change across releases.  For example, metaclass "
"attributes are not in the result list when the argument is a class."
msgstr ""
"因為 :func:`dir` 主要是為了便於在互動式直譯器時使用，所以它會試圖返回人們感興"
"趣的名稱集合，而不是試圖保證結果的嚴格性或一致性，它具體的行為也可能在不同版"
"本之間改變。例如，當引數是一個類別時，metaclass 的屬性不包含在結果列表中。"

#: ../../library/functions.rst:397
msgid ""
"Take two (non complex) numbers as arguments and return a pair of numbers "
"consisting of their quotient and remainder when using integer division.  "
"With mixed operand types, the rules for binary arithmetic operators apply.  "
"For integers, the result is the same as ``(a // b, a % b)``. For floating "
"point numbers the result is ``(q, a % b)``, where *q* is usually ``math."
"floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a % b`` "
"is very close to *a*, if ``a % b`` is non-zero it has the same sign as *b*, "
"and ``0 <= abs(a % b) < abs(b)``."
msgstr ""
"它將兩個（非複數）數字作為引數，並在執行整數除法時返回一對商和餘數。對於混合"
"運算元型別，適用二進位算術運算子的規則。對於整數，運算結果和 ``(a // b, a % "
"b)`` 一致。對於浮點數，運算結果是 ``(q, a % b)`` ，*q* 通常是 ``math."
"floor(a / b)`` 但可能會比 1 小。在任何情況下， ``q * b + a % b`` 和  *a* 基本"
"相等，如果 ``a % b`` 非零而它的符號和 *b* 一樣，並且 ``0 <= abs(a % b) < "
"abs(b)`` 。"

#: ../../library/functions.rst:409
msgid ""
"Return an enumerate object. *iterable* must be a sequence, an :term:"
"`iterator`, or some other object which supports iteration. The :meth:"
"`~iterator.__next__` method of the iterator returned by :func:`enumerate` "
"returns a tuple containing a count (from *start* which defaults to 0) and "
"the values obtained from iterating over *iterable*."
msgstr ""
"返回一個列舉物件。*iterable* 必須是一個序列，或 :term:`iterator`，或其他支援"
"疊代的物件。 :func:`enumerate` 返回的疊代器的 :meth:`~iterator.__next__` 方法"
"返回一個 tuple，裡面包含一個計數值（從 *start* 開始，預設為 0）和通過疊代 "
"*iterable* 獲得的值。"

#: ../../library/functions.rst:421
msgid "Equivalent to::"
msgstr ""
"等價於：\n"
"\n"
"::"

#: ../../library/functions.rst:432
msgid ""
"The arguments are a string and optional globals and locals.  If provided, "
"*globals* must be a dictionary.  If provided, *locals* can be any mapping "
"object."
msgstr ""
"引數是一個字串，以及選擇性的 globals 和 locals。如果有提供選擇性引數，"
"*globals* 必須是一個 dictionary。*locals* 可以是任何對映物件。"

#: ../../library/functions.rst:436
msgid ""
"The *expression* argument is parsed and evaluated as a Python expression "
"(technically speaking, a condition list) using the *globals* and *locals* "
"dictionaries as global and local namespace.  If the *globals* dictionary is "
"present and does not contain a value for the key ``__builtins__``, a "
"reference to the dictionary of the built-in module :mod:`builtins` is "
"inserted under that key before *expression* is parsed. This means that "
"*expression* normally has full access to the standard :mod:`builtins` module "
"and restricted environments are propagated.  If the *locals* dictionary is "
"omitted it defaults to the *globals* dictionary.  If both dictionaries are "
"omitted, the expression is executed in the environment where :func:`eval` is "
"called.  The return value is the result of the evaluated expression. Syntax "
"errors are reported as exceptions.  Example:"
msgstr ""
"*expression* 引數被解析並執行成 Python 表示式（技術上而言，是條件列表），"
"*globals* 和 *locals* dictionaries 分別用作全域性和本地命名空間。如果 "
"*globals* 字典存在但缺少 ``__builtins__`` 的鍵值，那 *expression* 被解析之"
"前，將為該鍵插入對內建 :mod:`builtins` 模組字典的引用。這意味著，"
"*expression* 通常可以完全存取標準 :mod:`builtins` 模組，並且受限制的環境會傳"
"播此特性。如果 *locals* 被省略，那它的預設值是 *globals* 字典。如果兩個 "
"dictionary 變數都被省略，則在 :func:`eval`  被呼叫的環境中執行表示式。函式的"
"返回值是表示式執行的結果。語法錯誤會產生異常。如："

#: ../../library/functions.rst:453
msgid ""
"This function can also be used to execute arbitrary code objects (such as "
"those created by :func:`compile`).  In this case pass a code object instead "
"of a string.  If the code object has been compiled with ``'exec'`` as the "
"*mode* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""
"這個函式也可以用來執行任意程式碼物件（如：被 :func:`compile`  建立的那些）。"
"這種情況下，傳入的引數是程式碼物件，而不是字串。如果編譯該物件時的 *mode* 引"
"數是 ``'exec'`` 那麼 :func:`eval` 返回值為 ``None`` 。"

#: ../../library/functions.rst:458
msgid ""
"Hints: dynamic execution of statements is supported by the :func:`exec` "
"function.  The :func:`globals` and :func:`locals` functions returns the "
"current global and local dictionary, respectively, which may be useful to "
"pass around for use by :func:`eval` or :func:`exec`."
msgstr ""
"提示： :func:`exec` 函式支援動態執行語句。 :func:`globals` 和 :func:`locals` "
"函式分別返回當前的全域性和局部性 dictionary，它們對於將引數傳遞給 :func:"
"`eval` 或 :func:`exec` 可能會方便許多。"

#: ../../library/functions.rst:463
msgid ""
"See :func:`ast.literal_eval` for a function that can safely evaluate strings "
"with expressions containing only literals."
msgstr ""
"另外可以參閱 :func:`ast.literal_eval`，該函式可以安全執行僅包含文字的表示式字"
"串。"

#: ../../library/functions.rst:470
msgid ""
"This function supports dynamic execution of Python code. *object* must be "
"either a string or a code object.  If it is a string, the string is parsed "
"as a suite of Python statements which is then executed (unless a syntax "
"error occurs). [#]_ If it is a code object, it is simply executed.  In all "
"cases, the code that's executed is expected to be valid as file input (see "
"the section \"File input\" in the Reference Manual). Be aware that the :"
"keyword:`return` and :keyword:`yield` statements may not be used outside of "
"function definitions even within the context of code passed to the :func:"
"`exec` function. The return value is ``None``."
msgstr ""
"這個函式支援動態執行 Python 程式碼。*object* 必須是字串或者程式碼物件。如果是"
"字串，那麼該字串將被解析為一系列 Python 語句並執行（除非發生語法錯誤）。[#]_ "
"如果是程式碼物件，它將被直接執行。無論哪種情況，被執行的程式碼都需要和檔案輸"
"入一樣是有效的（可參考手冊中關於「檔案輸入」的章節）。請注意即使在傳遞給 :"
"func:`exec` 函式的程式碼的上下文中，:keyword:`return` 和 :keyword:`yield` 語"
"句也不能在函式定義之外使用。該函式返回值是 ``None`` 。"

#: ../../library/functions.rst:480
msgid ""
"In all cases, if the optional parts are omitted, the code is executed in the "
"current scope.  If only *globals* is provided, it must be a dictionary, "
"which will be used for both the global and the local variables.  If "
"*globals* and *locals* are given, they are used for the global and local "
"variables, respectively.  If provided, *locals* can be any mapping object.  "
"Remember that at module level, globals and locals are the same dictionary. "
"If exec gets two separate objects as *globals* and *locals*, the code will "
"be executed as if it were embedded in a class definition."
msgstr ""
"無論哪種情況，如果省略了選擇性引數，程式碼將在當前範圍內執行。如果只提供了 "
"*globals* 引數，就必須是字典型別，而且會被用作全域性和本地變數。如果同時提供"
"了 *globals* 和 *locals* 引數，它們分別被用作全域性和本地變數。如果提供了 "
"*locals* 引數，則它可以是任何對映型的物件。請記住在模組層級，全域性和本地變數"
"是相同的 dictionary。如果 exec 有兩個不同的 *globals* 和 *locals* 物件，程式"
"碼就像嵌入在類別定義中一樣執行。"

#: ../../library/functions.rst:489
msgid ""
"If the *globals* dictionary does not contain a value for the key "
"``__builtins__``, a reference to the dictionary of the built-in module :mod:"
"`builtins` is inserted under that key.  That way you can control what "
"builtins are available to the executed code by inserting your own "
"``__builtins__`` dictionary into *globals* before passing it to :func:`exec`."
msgstr ""
"如果 *globals* 字典不包含 ``__builtins__`` 鍵值，則將為該鍵插入對內建 :mod:"
"`builtins` 模組字典的引用。因此，在將執行的程式碼傳遞給 :func:`exec` 之前，可"
"以通過將自己的 ``__builtins__`` 字典插入到 *globals* 中來控制可以使用哪些內建"
"程式碼。"

#: ../../library/functions.rst:497
msgid ""
"The built-in functions :func:`globals` and :func:`locals` return the current "
"global and local dictionary, respectively, which may be useful to pass "
"around for use as the second and third argument to :func:`exec`."
msgstr ""
"內建 :func:`globals` 和 :func:`locals` 函式各自返回當前的全域性和本地字典，因"
"此可以將它們傳遞給 :func:`exec` 的第二個和第三個引數。"

#: ../../library/functions.rst:503
msgid ""
"The default *locals* act as described for function :func:`locals` below: "
"modifications to the default *locals* dictionary should not be attempted. "
"Pass an explicit *locals* dictionary if you need to see effects of the code "
"on *locals* after function :func:`exec` returns."
msgstr ""
"預設情況下，*locals* 的行為如下面 :func:`locals` 函式描述的一樣：不要試圖改變"
"預設的 *locals* 字典。如果您想在 :func:`exec` 函式返回時知道程式碼對 "
"*locals* 的變動，請明確地傳遞 *locals* 字典。"

#: ../../library/functions.rst:511
msgid ""
"Construct an iterator from those elements of *iterable* for which *function* "
"returns true.  *iterable* may be either a sequence, a container which "
"supports iteration, or an iterator.  If *function* is ``None``, the identity "
"function is assumed, that is, all elements of *iterable* that are false are "
"removed."
msgstr ""
"用 *iterable* 中函式 *function* 返回 True 的那些元素，構建一個新的疊代器。"
"*iterable* 可以是一個序列，一個支援疊代的容器，或一個疊代器。如果 *function* "
"是 ``None``，則會假設它是一個恆等函數，即 *iterable* 中所有返回 False 的元素"
"會被移除。"

#: ../../library/functions.rst:517
msgid ""
"Note that ``filter(function, iterable)`` is equivalent to the generator "
"expression ``(item for item in iterable if function(item))`` if function is "
"not ``None`` and ``(item for item in iterable if item)`` if function is "
"``None``."
msgstr ""
"請注意，``filter(function, iterable)`` 相當於一個生成器表示式，當 function 不"
"是 ``None`` 的時候為 ``(item for item in iterable if function(item))``；"
"function 是 ``None`` 的時候為 ``(item for item in iterable if item)`` 。"

#: ../../library/functions.rst:522
msgid ""
"See :func:`itertools.filterfalse` for the complementary function that "
"returns elements of *iterable* for which *function* returns false."
msgstr ""
"請參閱 :func:`itertools.filterfalse` 瞭解，只有 *function* 返回 false 時才選"
"取 *iterable* 中元素的互補函數。"

#: ../../library/functions.rst:532
msgid "Return a floating point number constructed from a number or string *x*."
msgstr "返回從數字或字串 *x* 生成的浮點數。"

#: ../../library/functions.rst:534
msgid ""
"If the argument is a string, it should contain a decimal number, optionally "
"preceded by a sign, and optionally embedded in whitespace.  The optional "
"sign may be ``'+'`` or ``'-'``; a ``'+'`` sign has no effect on the value "
"produced.  The argument may also be a string representing a NaN (not-a-"
"number), or a positive or negative infinity.  More precisely, the input must "
"conform to the following grammar after leading and trailing whitespace "
"characters are removed:"
msgstr ""
"如果引數是字串，則它必須是包含十進位制數字的字串，字串前面可以有符號，之前也"
"可以有空格。選擇性的符號有 ``'+'`` 和 ``'-'`` ； ``'+'`` 對建立的值沒有影響。"
"引數也可以是 NaN（非數字）、正負無窮大的字串。確切地說，除去首尾的空格後，輸"
"入必須遵循以下語法："

#: ../../library/functions.rst:549
msgid ""
"Here ``floatnumber`` is the form of a Python floating-point literal, "
"described in :ref:`floating`.  Case is not significant, so, for example, "
"\"inf\", \"Inf\", \"INFINITY\" and \"iNfINity\" are all acceptable spellings "
"for positive infinity."
msgstr ""
"這裡， ``floatnumber`` 是 Python 浮點數的字串形式，詳見 :ref:`floating`。字母"
"大小寫都可以，例如，“inf”、“Inf”、“INFINITY”、“iNfINity” 都可以表示正無窮大。"

#: ../../library/functions.rst:554
msgid ""
"Otherwise, if the argument is an integer or a floating point number, a "
"floating point number with the same value (within Python's floating point "
"precision) is returned.  If the argument is outside the range of a Python "
"float, an :exc:`OverflowError` will be raised."
msgstr ""
"另一方面，如果引數是整數或浮點數，則返回具有相同值（在 Python 浮點精度範圍"
"內）的浮點數。如果引數在 Python 浮點精度範圍外，則會觸發 :exc:"
"`OverflowError`。"

#: ../../library/functions.rst:559
msgid ""
"For a general Python object ``x``, ``float(x)`` delegates to ``x."
"__float__()``."
msgstr ""
"對於一般的 Python 物件 ``x`` ， ``float(x)`` 指派給 ``x.__float__()`` 。"

#: ../../library/functions.rst:562
msgid "If no argument is given, ``0.0`` is returned."
msgstr "如果沒有引數，則返回 ``0.0`` 。"

#: ../../library/functions.rst:564
msgid "Examples::"
msgstr ""
"例如：\n"
"\n"
"::"

#: ../../library/functions.rst:577
msgid "The float type is described in :ref:`typesnumeric`."
msgstr ":ref:`typesnumeric` 描述了浮點數型別。"

#: ../../library/functions.rst:592
msgid ""
"Convert a *value* to a \"formatted\" representation, as controlled by "
"*format_spec*.  The interpretation of *format_spec* will depend on the type "
"of the *value* argument, however there is a standard formatting syntax that "
"is used by most built-in types: :ref:`formatspec`."
msgstr ""
"將 *value* 轉換為 *format_spec* 控制的「格式化」表示。*format_spec* 的解釋取"
"決於 *value* 引數的型別，但是大多數內建型別使用標準格式化語法：:ref:"
"`formatspec`。"

#: ../../library/functions.rst:597
msgid ""
"The default *format_spec* is an empty string which usually gives the same "
"effect as calling :func:`str(value) <str>`."
msgstr ""
"預設的 *format_spec* 是一個空字串，它通常和呼叫 :func:`str(value)<str>` 的結"
"果相同。"

#: ../../library/functions.rst:600
msgid ""
"A call to ``format(value, format_spec)`` is translated to ``type(value)."
"__format__(value, format_spec)`` which bypasses the instance dictionary when "
"searching for the value's :meth:`__format__` method.  A :exc:`TypeError` "
"exception is raised if the method search reaches :mod:`object` and the "
"*format_spec* is non-empty, or if either the *format_spec* or the return "
"value are not strings."
msgstr ""
"呼叫 ``format(value, format_spec)`` 會轉換成 ``type(value).__format__(value, "
"format_spec)`` ，當搜尋 value 的 :meth:`__format__` 方法時，會忽略實例中的字"
"典。如果搜尋到 :mod:`object` 這個方法但 *format_spec* 不為空，或 "
"*format_spec* 以及返回值不是字串，會觸發 :exc:`TypeError` 異常。"

#: ../../library/functions.rst:607
msgid ""
"``object().__format__(format_spec)`` raises :exc:`TypeError` if "
"*format_spec* is not an empty string."
msgstr ""
"當 *format_spec* 不是空字串時， ``object().__format__(format_spec)`` 會觸發 :"
"exc:`TypeError`。"

#: ../../library/functions.rst:616
msgid ""
"Return a new :class:`frozenset` object, optionally with elements taken from "
"*iterable*.  ``frozenset`` is a built-in class.  See :class:`frozenset` and :"
"ref:`types-set` for documentation about this class."
msgstr ""
"返回一個新的 :class:`frozenset` 物件，它包含選擇性引數 *iterable* 中的元素。 "
"``frozenset`` 是一個內建的類別。有關此類別的文件，請參閱 :class:`frozenset` "
"和 :ref:`types-set`。"

#: ../../library/functions.rst:620
msgid ""
"For other containers see the built-in :class:`set`, :class:`list`, :class:"
"`tuple`, and :class:`dict` classes, as well as the :mod:`collections` module."
msgstr ""
"請參閱內建的 :class:`set`、:class:`list`、:class:`tuple` 和 :class:`dict` 類"
"別，以及 :mod:`collections` 模組來了解其它的容器。"

#: ../../library/functions.rst:627
msgid ""
"Return the value of the named attribute of *object*.  *name* must be a "
"string. If the string is the name of one of the object's attributes, the "
"result is the value of that attribute.  For example, ``getattr(x, "
"'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not "
"exist, *default* is returned if provided, otherwise :exc:`AttributeError` is "
"raised."
msgstr ""
"返回物件指定屬性的值。*name* 必須是字串。如果該字串是物件的屬性之一，則返回該"
"屬性的值。例如， ``getattr(x, 'foobar')`` 等同於 ``x.foobar``。如果指定的屬性"
"不存在，且提供了 *default* 值，則返回其值，否則觸發 :exc:`AttributeError`。"

#: ../../library/functions.rst:636
msgid ""
"Return a dictionary representing the current global symbol table. This is "
"always the dictionary of the current module (inside a function or method, "
"this is the module where it is defined, not the module from which it is "
"called)."
msgstr ""
"返回代表當前全域性符號表的字典。這總是當前模組的字典（在函式或方法中，不是呼"
"叫它的模組，而是定義它的模組）。"

#: ../../library/functions.rst:643
msgid ""
"The arguments are an object and a string.  The result is ``True`` if the "
"string is the name of one of the object's attributes, ``False`` if not. "
"(This is implemented by calling ``getattr(object, name)`` and seeing whether "
"it raises an :exc:`AttributeError` or not.)"
msgstr ""
"該引數是一個物件和一個字串。如果字串是物件屬性之一的名稱，則返回 ``True``，否"
"則返回 ``False``。（此功能是通過呼叫 ``getattr(object, name)`` 看是否有 :exc:"
"`AttributeError` 異常來實現的。）"

#: ../../library/functions.rst:651
msgid ""
"Return the hash value of the object (if it has one).  Hash values are "
"integers.  They are used to quickly compare dictionary keys during a "
"dictionary lookup.  Numeric values that compare equal have the same hash "
"value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""
"返回該物件的雜湊值（如果它有的話）。雜湊值是整數。它們在字典查詢元素時用來快"
"速比較字典的鍵。相同大小的數字數值有相同的雜湊值（即使它們型別不同，如 1 和 "
"1.0）。"

#: ../../library/functions.rst:658
msgid ""
"For objects with custom :meth:`__hash__` methods, note that :func:`hash` "
"truncates the return value based on the bit width of the host machine. See :"
"meth:`__hash__` for details."
msgstr ""
"如果物件實現了自己的 :meth:`__hash__` 方法，請注意，:func:`hash` 根據執行機器"
"的位元長度來擷取返回值。另請參閱 :meth:`__hash__`。"

#: ../../library/functions.rst:664
msgid ""
"Invoke the built-in help system.  (This function is intended for interactive "
"use.)  If no argument is given, the interactive help system starts on the "
"interpreter console.  If the argument is a string, then the string is looked "
"up as the name of a module, function, class, method, keyword, or "
"documentation topic, and a help page is printed on the console.  If the "
"argument is any other kind of object, a help page on the object is generated."
msgstr ""
"啟動內建的幫助系統（此函式主要在互動式中使用）。如果沒有引數，直譯器控制臺裡"
"會啟動互動式幫助系統。如果引數是一個字串，則在模組、函式、類別、方法、關鍵字"
"或文件主題中搜索該字串，並在控制台上列印幫助資訊。如果引數是其他任意物件，則"
"會生成該物件的幫助頁。"

#: ../../library/functions.rst:671
msgid ""
"This function is added to the built-in namespace by the :mod:`site` module."
msgstr "該函式通過 :mod:`site` 模組加入到內建命名空間。"

#: ../../library/functions.rst:673
msgid ""
"Changes to :mod:`pydoc` and :mod:`inspect` mean that the reported signatures "
"for callables are now more comprehensive and consistent."
msgstr ""
":mod:`pydoc` 和 :mod:`inspect` 的變更使得可呼叫物件的簽名信息更加全面和一致。"

#: ../../library/functions.rst:680
msgid ""
"Convert an integer number to a lowercase hexadecimal string prefixed with "
"\"0x\". If *x* is not a Python :class:`int` object, it has to define an :"
"meth:`__index__` method that returns an integer. Some examples:"
msgstr ""
"將整數轉換為以「0x」為字首的小寫十六進位制字串。如果 *x* 不是 Python :class:"
"`int` 物件，則必須定義一個 :meth:`__index__` 方法並且返回一個整數。一些例子："

#: ../../library/functions.rst:689
msgid ""
"If you want to convert an integer number to an uppercase or lower "
"hexadecimal string with prefix or not, you can use either of the following "
"ways:"
msgstr ""
"如果要將整數轉換為大寫或小寫的十六進位制字串，並可選擇有無「0x」字首，則可以"
"使用如下方法："

#: ../../library/functions.rst:701
msgid ""
"See also :func:`int` for converting a hexadecimal string to an integer using "
"a base of 16."
msgstr "另請參閱 :func:`int` 將十六進位制字串轉換為以 16 為基數的整數。"

#: ../../library/functions.rst:706
msgid ""
"To obtain a hexadecimal string representation for a float, use the :meth:"
"`float.hex` method."
msgstr "如果要獲取浮點數的十六進位制字串形式，請使用 :meth:`float.hex` 方法。"

#: ../../library/functions.rst:712
msgid ""
"Return the \"identity\" of an object.  This is an integer which is "
"guaranteed to be unique and constant for this object during its lifetime. "
"Two objects with non-overlapping lifetimes may have the same :func:`id` "
"value."
msgstr ""
"返回物件的「標識值」。該值是一個整數，在此物件的生命週期中保證是唯一且恆定"
"的。兩個生命期不重疊的物件可能具有相同的 :func:`id` 值。"

#: ../../library/functions.rst:722
msgid ""
"If the *prompt* argument is present, it is written to standard output "
"without a trailing newline.  The function then reads a line from input, "
"converts it to a string (stripping a trailing newline), and returns that.  "
"When EOF is read, :exc:`EOFError` is raised.  Example::"
msgstr ""
"如果有提供 *prompt* 引數，則將其寫入標準輸出，末尾不帶換行符。接下來，該函式"
"從輸入中讀取一行，將其轉換為字串（去除末尾的換行符）並返回。當讀取到 EOF 時，"
"則觸發 :exc:`EOFError`。例如：\n"
"\n"
"::"

#: ../../library/functions.rst:732
msgid ""
"If the :mod:`readline` module was loaded, then :func:`input` will use it to "
"provide elaborate line editing and history features."
msgstr ""
"如果載入了 :mod:`readline` 模組，:func:`input` 將使用它來提供複雜的行編輯和歷"
"史記錄功能。"

#: ../../library/functions.rst:739
msgid ""
"Return an integer object constructed from a number or string *x*, or return "
"``0`` if no arguments are given.  If *x* defines :meth:`__int__`, ``int(x)`` "
"returns ``x.__int__()``.  If *x* defines :meth:`__trunc__`, it returns ``x."
"__trunc__()``. For floating point numbers, this truncates towards zero."
msgstr ""
"返回一個使用數字或字串 *x* 生成的整數物件，或者沒有引數的時候返回 ``0`` 。如"
"果 *x* 定義了 :meth:`__int__`，``int(x)`` 返回 ``x.__int__()`` 。如果 *x* 定"
"義了 :meth:`__trunc__`，它返回 ``x.__trunc__()`` 。對於浮點數，它向零舍入。"

#: ../../library/functions.rst:745
msgid ""
"If *x* is not a number or if *base* is given, then *x* must be a string, :"
"class:`bytes`, or :class:`bytearray` instance representing an :ref:`integer "
"literal <integers>` in radix *base*.  Optionally, the literal can be "
"preceded by ``+`` or ``-`` (with no space in between) and surrounded by "
"whitespace.  A base-n literal consists of the digits 0 to n-1, with ``a`` to "
"``z`` (or ``A`` to ``Z``) having values 10 to 35.  The default *base* is 10. "
"The allowed values are 0 and 2--36. Base-2, -8, and -16 literals can be "
"optionally prefixed with ``0b``/``0B``, ``0o``/``0O``, or ``0x``/``0X``, as "
"with integer literals in code.  Base 0 means to interpret exactly as a code "
"literal, so that the actual base is 2, 8, 10, or 16, and so that "
"``int('010', 0)`` is not legal, while ``int('010')`` is, as well as "
"``int('010', 8)``."
msgstr ""
"如果 *x* 不是數字，或者有 *base* 引數，*x* 必須是字串、:class:`bytes`、或進位"
"制為 *base* 的\\ :ref:`整數文字 <integers>` 的\\ :class:`bytearray` 實例。該"
"文字前可以有 ``+`` 或 ``-``（中間不能有空格），前後可以有空格。一個進製為 n "
"的文字包含 0 到 n-1，其中 ``a`` 到 ``z``（或 ``A`` 到 ``Z`` ）表示 10 到 35。"
"預設的 *base* 為 10 。允許的進位制有 0、2–36。2、8、16 進位制的文字可以在程式"
"碼中用 ``0b``/``0B``、``0o``/``0O``、``0x``/``0X`` 字首來表示，如同程式碼中的"
"整數文字。進位制為 0 將按照程式碼的字面進位制來直譯，最後的結果會是 2、8、"
"10、16 進制中的一個，所以 ``int('010', 0)`` 是非法的，但 ``int('010')`` 和 "
"``int('010', 8)`` 是合法的。"

#: ../../library/functions.rst:758
msgid "The integer type is described in :ref:`typesnumeric`."
msgstr "整數型別定義請參閱 :ref:`typesnumeric` 。"

#: ../../library/functions.rst:760
msgid ""
"If *base* is not an instance of :class:`int` and the *base* object has a :"
"meth:`base.__index__ <object.__index__>` method, that method is called to "
"obtain an integer for the base.  Previous versions used :meth:`base.__int__ "
"<object.__int__>` instead of :meth:`base.__index__ <object.__index__>`."
msgstr ""
"如果 *base* 不是 :class:`int` 的實例，但 *base* 物件有 :meth:`base.__index__ "
"<object.__index__>` 方法，則會呼叫該方法來獲取此進位制整數。以前的版本使用 :"
"meth:`base.__int__ <object.__int__>` 而不是 :meth:`base.__index__ <object."
"__index__>`。"

#: ../../library/functions.rst:776
msgid ""
"Return true if the *object* argument is an instance of the *classinfo* "
"argument, or of a (direct, indirect or :term:`virtual <abstract base "
"class>`) subclass thereof.  If *object* is not an object of the given type, "
"the function always returns false. If *classinfo* is a tuple of type objects "
"(or recursively, other such tuples), return true if *object* is an instance "
"of any of the types. If *classinfo* is not a type or tuple of types and such "
"tuples, a :exc:`TypeError` exception is raised."
msgstr ""
"如果 *object* 引數是 *classinfo* 引數的實例，或者是（直接、間接或 :term:"
"`virtual <abstract base class>`）子類別的實例，則返回 true。如果 *object* 不"
"是給定型別的物件，函式始終返回 false。如果 *classinfo* 是包含物件型別的 "
"tuple（或多個遞迴 tuple），如果 *object* 是其中的任何一個物件的實例則返回 "
"true。 如果 *classinfo* 既不是型別，也不是型別 tuple 或型別的遞迴 tuple，那麼"
"會觸發 :exc:`TypeError` 異常。"

#: ../../library/functions.rst:788
msgid ""
"Return true if *class* is a subclass (direct, indirect or :term:`virtual "
"<abstract base class>`) of *classinfo*.  A class is considered a subclass of "
"itself. *classinfo* may be a tuple of class objects, in which case every "
"entry in *classinfo* will be checked. In any other case, a :exc:`TypeError` "
"exception is raised."
msgstr ""
"如果 *class* 是 *classinfo* 的子類別（直接、間接或 :term:`virtual <abstract "
"base class>`），則返回 true。*classinfo* 可以是類別物件的 tuple，此時 "
"*classinfo* 中的每個元素都會被檢查。其他情況，會觸發 :exc:`TypeError` 異常。"

#: ../../library/functions.rst:797
msgid ""
"Return an :term:`iterator` object.  The first argument is interpreted very "
"differently depending on the presence of the second argument. Without a "
"second argument, *object* must be a collection object which supports the "
"iteration protocol (the :meth:`__iter__` method), or it must support the "
"sequence protocol (the :meth:`__getitem__` method with integer arguments "
"starting at ``0``).  If it does not support either of those protocols, :exc:"
"`TypeError` is raised. If the second argument, *sentinel*, is given, then "
"*object* must be a callable object.  The iterator created in this case will "
"call *object* with no arguments for each call to its :meth:`~iterator."
"__next__` method; if the value returned is equal to *sentinel*, :exc:"
"`StopIteration` will be raised, otherwise the value will be returned."
msgstr ""
"返回一個 :term:`iterator` 物件。根據是否存在第二個引數，第一個引數的意義是非"
"常不同的。如果沒有第二個引數，*object* 必須是支援疊代協議（有 :meth:"
"`__iter__` 方法）的集合物件，或必須支援序列協議（有 :meth:`__getitem__` 方"
"法，且數字引數從 ``0`` 開始）。如果它不支援這些協議，會觸發 :exc:"
"`TypeError`。如果有第二個引數 *sentinel*，那麼 *object* 必須是可呼叫的物件。"
"這種情況下生成的疊代器，每次疊代呼叫它的 :meth:`~iterator.__next__` 方法時都"
"會不帶引數地呼叫 *object*；如果返回的結果是 *sentinel* 則觸發 :exc:"
"`StopIteration`，否則返回呼叫結果。"

#: ../../library/functions.rst:810
msgid "See also :ref:`typeiter`."
msgstr "另請參閱 :ref:`typeiter`。"

#: ../../library/functions.rst:812
msgid ""
"One useful application of the second form of :func:`iter` is to read lines "
"of a file until a certain line is reached.  The following example reads a "
"file until the :meth:`~io.TextIOBase.readline` method returns an empty "
"string::"
msgstr ""
":func:`iter` 的第二種形式的一個有用的應用是將檔案讀到特定行。在下面的例子中，"
"我們將讀取檔案，直到 :meth:`~io.TextIOBase.readline` 方法返回一個空字串：\n"
"\n"
"::"

#: ../../library/functions.rst:823
msgid ""
"Return the length (the number of items) of an object.  The argument may be a "
"sequence (such as a string, bytes, tuple, list, or range) or a collection "
"(such as a dictionary, set, or frozen set)."
msgstr ""
"返回物件的長度（元素個數）。引數可以是序列（如 string、bytes、tuple、list 或 "
"range ）或集合（如 dictionary、set 或 frozen set ）。"

#: ../../library/functions.rst:832
msgid ""
"Rather than being a function, :class:`list` is actually a mutable sequence "
"type, as documented in :ref:`typesseq-list` and :ref:`typesseq`."
msgstr ""
"除了是函式，:class:`list` 也是可變序列型別，詳情請參閱 :ref:`typesseq-list` "
"和 :ref:`typesseq`。"

#: ../../library/functions.rst:838
msgid ""
"Update and return a dictionary representing the current local symbol table. "
"Free variables are returned by :func:`locals` when it is called in function "
"blocks, but not in class blocks."
msgstr ""
"更新並返回表示當前本地符號表的字典。在函式區塊而不是類別區塊中呼叫 :func:"
"`locals` 時會返回自由變數。"

#: ../../library/functions.rst:843
msgid ""
"The contents of this dictionary should not be modified; changes may not "
"affect the values of local and free variables used by the interpreter."
msgstr ""
"此字典的內容不應該被更動；更改可能不會影響直譯器使用的本地變數或自由變數的"
"值。"

#: ../../library/functions.rst:848
msgid ""
"Return an iterator that applies *function* to every item of *iterable*, "
"yielding the results.  If additional *iterable* arguments are passed, "
"*function* must take that many arguments and is applied to the items from "
"all iterables in parallel.  With multiple iterables, the iterator stops when "
"the shortest iterable is exhausted.  For cases where the function inputs are "
"already arranged into argument tuples, see :func:`itertools.starmap`\\."
msgstr ""
"產生一個將 *function* 應用於 *iterable* 中所有元素，並收集返回結果的 "
"iterator。如果傳遞了額外的 *iterable* 引數，*function* 必須接受相同個數的引"
"數，並應用於所有 iterables 中同時獲取的元素。當有多個 iterables 時，最短的 "
"iteratable 耗盡時 iterator 也會結束。如果函式的輸入已經是 tuple 的引數，請參"
"閱 :func:`itertools.starmap`\\。"

#: ../../library/functions.rst:859
msgid ""
"Return the largest item in an iterable or the largest of two or more "
"arguments."
msgstr "返回 iterable 中最大的元素，或者返回兩個及以上引數中最大的。"

#: ../../library/functions.rst:862
msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The largest item in the iterable is returned.  If two or more positional "
"arguments are provided, the largest of the positional arguments is returned."
msgstr ""
"如果只提供了一個相對位置引數，它必須是非空的 :term:`iterable`，返回 iterable "
"中最大的元素。如果提供了兩個及以上的 相對位置引數，則返回最大的相對位置引數。"

#: ../../library/functions.rst:867 ../../library/functions.rst:901
msgid ""
"There are two optional keyword-only arguments. The *key* argument specifies "
"a one-argument ordering function like that used for :meth:`list.sort`. The "
"*default* argument specifies an object to return if the provided iterable is "
"empty. If the iterable is empty and *default* is not provided, a :exc:"
"`ValueError` is raised."
msgstr ""
"這個函式有兩個選擇性「只能用關鍵字」的引數。*key* 引數指定一個引數為一的排序"
"函式，如傳給 :meth:`list.sort`。*default* 引數是當 iterable 為空時返回的值。"
"如果 iterable 為空，並且沒有提供 *default*，則會觸發 :exc:`ValueError`。"

#: ../../library/functions.rst:873
msgid ""
"If multiple items are maximal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc, reverse=True)[0]`` and ``heapq."
"nlargest(1, iterable, key=keyfunc)``."
msgstr ""
"如果有多個最大元素，則此函式將返回第一個找到的。這和其他穩定排序工具如 "
"``sorted(iterable, key=keyfunc, reverse=True)[0]`` 和 ``heapq.nlargest(1, "
"iterable, key=keyfunc)`` 保持一致。"

#: ../../library/functions.rst:870 ../../library/functions.rst:912
msgid "The *default* keyword-only argument."
msgstr "*default* 唯一關鍵字引數。"

#: ../../library/functions.rst:886
msgid ""
"Return a \"memory view\" object created from the given argument.  See :ref:"
"`typememoryview` for more information."
msgstr ""
"返回由給定的引數建立之「memory view」物件。有關詳細資訊，請參閱 :ref:"
"`typememoryview`。"

#: ../../library/functions.rst:893
msgid ""
"Return the smallest item in an iterable or the smallest of two or more "
"arguments."
msgstr "返回 iterable 中最小的元素，或者返回兩個及以上引數中最小的。"

#: ../../library/functions.rst:896
msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The smallest item in the iterable is returned.  If two or more positional "
"arguments are provided, the smallest of the positional arguments is returned."
msgstr ""
"如果只提供了一個相對位置引數，它必須是 :term:`iterable`，返回 iterable 中最小"
"的元素。如果提供了兩個及以上的相對位置引數，則返回最小的相對位置引數。"

#: ../../library/functions.rst:907
msgid ""
"If multiple items are minimal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc)[0]`` and ``heapq.nsmallest(1, "
"iterable, key=keyfunc)``."
msgstr ""
"如果有多個最小元素，則此函式將返回第一個找到的。這和其他穩定排序工具如 "
"``sorted(iterable, key=keyfunc)[0]`` 和 ``heapq.nsmallest(1, iterable, "
"key=keyfunc)`` 保持一致。"

#: ../../library/functions.rst:918
msgid ""
"Retrieve the next item from the *iterator* by calling its :meth:`~iterator."
"__next__` method.  If *default* is given, it is returned if the iterator is "
"exhausted, otherwise :exc:`StopIteration` is raised."
msgstr ""
"通過呼叫 *iterator* 的 :meth:`~iterator.__next__` 方法獲取下一個元素。如果 "
"iterator 耗盡，則返回給定的 *default*，如果沒有預設值則觸發 :exc:"
"`StopIteration`。"

#: ../../library/functions.rst:925
msgid ""
"Return a new featureless object.  :class:`object` is a base for all classes. "
"It has the methods that are common to all instances of Python classes.  This "
"function does not accept any arguments."
msgstr ""
"返回一個沒有特徵的新物件。:class:`object` 是所有類別的基類。它具有所有 "
"Python 類別實例的通用方法。這個函式不接受任何引數。"

#: ../../library/functions.rst:931
msgid ""
":class:`object` does *not* have a :attr:`~object.__dict__`, so you can't "
"assign arbitrary attributes to an instance of the :class:`object` class."
msgstr ""
"由於 :class:`object` *沒有* :attr:`~object.__dict__`，因此無法將任意屬性賦"
"給 :class:`object` 類別的實例。"

#: ../../library/functions.rst:937
msgid ""
"Convert an integer number to an octal string prefixed with \"0o\".  The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`__index__` method that returns an "
"integer. For example:"
msgstr ""
"將一個整數轉變為一個字首為「0o」的八進位制字串。返回結果是一個合法的 Python "
"表示式。如果 *x* 不是 Python 的 :class:`int` 物件，那它需要定義 :meth:"
"`__index__` 方法返回一個整數。例子："

#: ../../library/functions.rst:947
msgid ""
"If you want to convert an integer number to octal string either with prefix "
"\"0o\" or not, you can use either of the following ways."
msgstr ""
"如果要將整數轉換為八進位制字串，具備「0o」字首或不具備，則可以使用下面的方"
"法。"

#: ../../library/functions.rst:964
msgid ""
"Open *file* and return a corresponding :term:`file object`.  If the file "
"cannot be opened, an :exc:`OSError` is raised."
msgstr ""
"開啟 *file* 並返回對應的 :term:`file object`。如果該檔案不能開啟，則觸發 :"
"exc:`OSError`。"

#: ../../library/functions.rst:967
msgid ""
"*file* is a :term:`path-like object` giving the pathname (absolute or "
"relative to the current working directory) of the file to be opened or an "
"integer file descriptor of the file to be wrapped.  (If a file descriptor is "
"given, it is closed when the returned I/O object is closed, unless *closefd* "
"is set to ``False``.)"
msgstr ""
"*file* 是一個 :term:`path-like object`，是將要開啟的檔案的路徑（絕對路徑或者"
"當前工作目錄的相當路徑），或是被封裝的整數檔案述敘符。（如果有提供檔案述敘"
"符，它會隨著返回的 I/O 物件關閉而關閉，除非 *closefd* 被設為 ``False`` 。）"

#: ../../library/functions.rst:973
msgid ""
"*mode* is an optional string that specifies the mode in which the file is "
"opened.  It defaults to ``'r'`` which means open for reading in text mode. "
"Other common values are ``'w'`` for writing (truncating the file if it "
"already exists), ``'x'`` for exclusive creation and ``'a'`` for appending "
"(which on *some* Unix systems, means that *all* writes append to the end of "
"the file regardless of the current seek position).  In text mode, if "
"*encoding* is not specified the encoding used is platform dependent: "
"``locale.getpreferredencoding(False)`` is called to get the current locale "
"encoding. (For reading and writing raw bytes use binary mode and leave "
"*encoding* unspecified.)  The available modes are:"
msgstr ""
"*mode* 是一個選擇性字串，用於指定開啟檔案的模式。預設值是 ``'r'`` ，這意味著"
"它以文字模式開啟並讀取。其他常見模式有：寫入 ``'w'`` （會捨去已經存在的檔"
"案）、唯一性創建 ``'x'``、追加寫入 ``'a'`` （在 *一些* Unix 系統上，無論當前"
"的檔案指標在什麼位置，*所有* 寫入都會追加到檔案末尾）。在文字模式，如果沒有指"
"定 *encoding*，則根據電腦平臺來決定使用的編碼：呼叫 ``locale."
"getpreferredencoding(False)`` 來獲取當前的本地編碼。（要讀取和寫入原始 "
"bytes，請使用二進位制模式並不要指定 *encoding*。）可用的模式有："

#: ../../library/functions.rst:990
msgid "Character"
msgstr "字元"

#: ../../library/functions.rst:990
msgid "Meaning"
msgstr "意義"

#: ../../library/functions.rst:992
msgid "``'r'``"
msgstr "``'r'``"

#: ../../library/functions.rst:992
msgid "open for reading (default)"
msgstr "讀取（預設）"

#: ../../library/functions.rst:993
msgid "``'w'``"
msgstr "``'w'``"

#: ../../library/functions.rst:993
msgid "open for writing, truncating the file first"
msgstr "寫入，並捨棄原有的文件內容"

#: ../../library/functions.rst:994
msgid "``'x'``"
msgstr "``'x'``"

#: ../../library/functions.rst:994
msgid "open for exclusive creation, failing if the file already exists"
msgstr "唯一性創建，如果文件已存在則會觸發錯誤"

#: ../../library/functions.rst:995
msgid "``'a'``"
msgstr "``'a'``"

#: ../../library/functions.rst:995
msgid "open for writing, appending to the end of the file if it exists"
msgstr "寫入，如果文件存在則在末尾追加寫入內容"

#: ../../library/functions.rst:996
msgid "``'b'``"
msgstr "``'b'``"

#: ../../library/functions.rst:996
msgid "binary mode"
msgstr "二進制模式"

#: ../../library/functions.rst:997
msgid "``'t'``"
msgstr "``'t'``"

#: ../../library/functions.rst:997
msgid "text mode (default)"
msgstr "文字模式（預設）"

#: ../../library/functions.rst:998
msgid "``'+'``"
msgstr "``'+'``"

#: ../../library/functions.rst:998
msgid "open a disk file for updating (reading and writing)"
msgstr "打開一個磁碟檔案用作更新（讀取並寫入）"

#: ../../library/functions.rst:999
msgid "``'U'``"
msgstr "``'U'``"

#: ../../library/functions.rst:999
msgid ":term:`universal newlines` mode (deprecated)"
msgstr ":term:`universal newlines` 模式（已棄用）"

#: ../../library/functions.rst:1002
msgid ""
"The default mode is ``'r'`` (open for reading text, synonym of ``'rt'``). "
"For binary read-write access, the mode ``'w+b'`` opens and truncates the "
"file to 0 bytes.  ``'r+b'`` opens the file without truncation."
msgstr ""
"預設的模式是 ``'r'``（開啟並讀取文字，同 ``'rt'`` ）。對於二進位制寫入， ``'w"
"+b'`` 模式開啟並把檔案內容變成 0 bytes， ``'r+b'`` 則不會捨棄原始內容。"

#: ../../library/functions.rst:1006
msgid ""
"As mentioned in the :ref:`io-overview`, Python distinguishes between binary "
"and text I/O.  Files opened in binary mode (including ``'b'`` in the *mode* "
"argument) return contents as :class:`bytes` objects without any decoding.  "
"In text mode (the default, or when ``'t'`` is included in the *mode* "
"argument), the contents of the file are returned as :class:`str`, the bytes "
"having been first decoded using a platform-dependent encoding or using the "
"specified *encoding* if given."
msgstr ""

#: ../../library/functions.rst:1016
msgid ""
"Python doesn't depend on the underlying operating system's notion of text "
"files; all the processing is done by Python itself, and is therefore "
"platform-independent."
msgstr ""

#: ../../library/functions.rst:1020
msgid ""
"*buffering* is an optional integer used to set the buffering policy.  Pass 0 "
"to switch buffering off (only allowed in binary mode), 1 to select line "
"buffering (only usable in text mode), and an integer > 1 to indicate the "
"size in bytes of a fixed-size chunk buffer.  When no *buffering* argument is "
"given, the default buffering policy works as follows:"
msgstr ""

#: ../../library/functions.rst:1026
msgid ""
"Binary files are buffered in fixed-size chunks; the size of the buffer is "
"chosen using a heuristic trying to determine the underlying device's \"block "
"size\" and falling back on :attr:`io.DEFAULT_BUFFER_SIZE`.  On many systems, "
"the buffer will typically be 4096 or 8192 bytes long."
msgstr ""

#: ../../library/functions.rst:1031
msgid ""
"\"Interactive\" text files (files for which :meth:`~io.IOBase.isatty` "
"returns ``True``) use line buffering.  Other text files use the policy "
"described above for binary files."
msgstr ""

#: ../../library/functions.rst:1035
msgid ""
"*encoding* is the name of the encoding used to decode or encode the file. "
"This should only be used in text mode.  The default encoding is platform "
"dependent (whatever :func:`locale.getpreferredencoding` returns), but any :"
"term:`text encoding` supported by Python can be used.  See the :mod:`codecs` "
"module for the list of supported encodings."
msgstr ""

#: ../../library/functions.rst:1042
msgid ""
"*errors* is an optional string that specifies how encoding and decoding "
"errors are to be handled—this cannot be used in binary mode. A variety of "
"standard error handlers are available (listed under :ref:`error-handlers`), "
"though any error handling name that has been registered with :func:`codecs."
"register_error` is also valid.  The standard names include:"
msgstr ""

#: ../../library/functions.rst:1050
msgid ""
"``'strict'`` to raise a :exc:`ValueError` exception if there is an encoding "
"error.  The default value of ``None`` has the same effect."
msgstr ""

#: ../../library/functions.rst:1054
msgid ""
"``'ignore'`` ignores errors.  Note that ignoring encoding errors can lead to "
"data loss."
msgstr ""

#: ../../library/functions.rst:1057
msgid ""
"``'replace'`` causes a replacement marker (such as ``'?'``) to be inserted "
"where there is malformed data."
msgstr ""

#: ../../library/functions.rst:1060
msgid ""
"``'surrogateescape'`` will represent any incorrect bytes as code points in "
"the Unicode Private Use Area ranging from U+DC80 to U+DCFF.  These private "
"code points will then be turned back into the same bytes when the "
"``surrogateescape`` error handler is used when writing data.  This is useful "
"for processing files in an unknown encoding."
msgstr ""

#: ../../library/functions.rst:1067
msgid ""
"``'xmlcharrefreplace'`` is only supported when writing to a file. Characters "
"not supported by the encoding are replaced with the appropriate XML "
"character reference ``&#nnn;``."
msgstr ""

#: ../../library/functions.rst:1071
msgid ""
"``'backslashreplace'`` replaces malformed data by Python's backslashed "
"escape sequences."
msgstr ""

#: ../../library/functions.rst:1074
msgid ""
"``'namereplace'`` (also only supported when writing) replaces unsupported "
"characters with ``\\N{...}`` escape sequences."
msgstr ""

#: ../../library/functions.rst:1080
msgid ""
"*newline* controls how :term:`universal newlines` mode works (it only "
"applies to text mode).  It can be ``None``, ``''``, ``'\\n'``, ``'\\r'``, "
"and ``'\\r\\n'``.  It works as follows:"
msgstr ""

#: ../../library/functions.rst:1084
msgid ""
"When reading input from the stream, if *newline* is ``None``, universal "
"newlines mode is enabled.  Lines in the input can end in ``'\\n'``, "
"``'\\r'``, or ``'\\r\\n'``, and these are translated into ``'\\n'`` before "
"being returned to the caller.  If it is ``''``, universal newlines mode is "
"enabled, but line endings are returned to the caller untranslated.  If it "
"has any of the other legal values, input lines are only terminated by the "
"given string, and the line ending is returned to the caller untranslated."
msgstr ""

#: ../../library/functions.rst:1092
msgid ""
"When writing output to the stream, if *newline* is ``None``, any ``'\\n'`` "
"characters written are translated to the system default line separator, :"
"data:`os.linesep`.  If *newline* is ``''`` or ``'\\n'``, no translation "
"takes place.  If *newline* is any of the other legal values, any ``'\\n'`` "
"characters written are translated to the given string."
msgstr ""

#: ../../library/functions.rst:1098
msgid ""
"If *closefd* is ``False`` and a file descriptor rather than a filename was "
"given, the underlying file descriptor will be kept open when the file is "
"closed.  If a filename is given *closefd* must be ``True`` (the default) "
"otherwise an error will be raised."
msgstr ""

#: ../../library/functions.rst:1103
msgid ""
"A custom opener can be used by passing a callable as *opener*. The "
"underlying file descriptor for the file object is then obtained by calling "
"*opener* with (*file*, *flags*). *opener* must return an open file "
"descriptor (passing :mod:`os.open` as *opener* results in functionality "
"similar to passing ``None``)."
msgstr ""

#: ../../library/functions.rst:1109
msgid "The newly created file is :ref:`non-inheritable <fd_inheritance>`."
msgstr "新建立的檔案是 :ref:`不可繼承的 <fd_inheritance>`。"

#: ../../library/functions.rst:1111
msgid ""
"The following example uses the :ref:`dir_fd <dir_fd>` parameter of the :func:"
"`os.open` function to open a file relative to a given directory::"
msgstr ""
"下面的範例使用 :func:`os.open` 函式返回值當作 :ref:`dir_fd <dir_fd>` 的參數，"
"從給定的目錄中用相對路徑開啟檔案：\n"
"\n"
"::"

#: ../../library/functions.rst:1124
msgid ""
"The type of :term:`file object` returned by the :func:`open` function "
"depends on the mode.  When :func:`open` is used to open a file in a text "
"mode (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, etc.), it returns a subclass of :"
"class:`io.TextIOBase` (specifically :class:`io.TextIOWrapper`).  When used "
"to open a file in a binary mode with buffering, the returned class is a "
"subclass of :class:`io.BufferedIOBase`.  The exact class varies: in read "
"binary mode, it returns an :class:`io.BufferedReader`; in write binary and "
"append binary modes, it returns an :class:`io.BufferedWriter`, and in read/"
"write mode, it returns an :class:`io.BufferedRandom`.  When buffering is "
"disabled, the raw stream, a subclass of :class:`io.RawIOBase`, :class:`io."
"FileIO`, is returned."
msgstr ""

#: ../../library/functions.rst:1145
msgid ""
"See also the file handling modules, such as, :mod:`fileinput`, :mod:`io` "
"(where :func:`open` is declared), :mod:`os`, :mod:`os.path`, :mod:"
"`tempfile`, and :mod:`shutil`."
msgstr ""
"另請參閱檔案操作模組，例如 :mod:`fileinput`、:mod:`io` （定義了 :func:`open` "
"的模組）、:mod:`os`、:mod:`os.path`、:mod:`tempfile` 以及 :mod:`shutil`。"

#: ../../library/functions.rst:1152
msgid "The *opener* parameter was added."
msgstr "增加了 *opener* 參數。"

#: ../../library/functions.rst:1153
msgid "The ``'x'`` mode was added."
msgstr "增加了 ``'x'`` 模式。"

#: ../../library/functions.rst:1154
msgid ":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr "過去觸發的 :exc:`IOError`，現在是 :exc:`OSError` 的別名。"

#: ../../library/functions.rst:1155
msgid ""
":exc:`FileExistsError` is now raised if the file opened in exclusive "
"creation mode (``'x'``) already exists."
msgstr ""
"如果檔案已存在但使用了唯一性建立模式（ ``'x'`` ），現在會觸發 :exc:"
"`FileExistsError`。"

#: ../../library/functions.rst:1161
msgid "The file is now non-inheritable."
msgstr "檔案在當前版本開始禁止繼承。"

#: ../../library/functions.rst:1165
msgid "The ``'U'`` mode."
msgstr "``'U'`` 模式。"

#: ../../library/functions.rst:1170
msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the function now retries the system call instead of raising an :"
"exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""
"如果系統呼叫被中斷，但訊號處理程序沒有觸發異常，此函式現在會重試系統呼叫，而"
"不是觸發 :exc:`InterruptedError` 異常（原因詳見 :pep:`475`）。"

#: ../../library/functions.rst:1173
msgid "The ``'namereplace'`` error handler was added."
msgstr "增加了 ``'namereplace'`` 錯誤處理程序。"

#: ../../library/functions.rst:1178
msgid "Support added to accept objects implementing :class:`os.PathLike`."
msgstr "增加對實現了 :class:`os.PathLike` 物件的支援。"

#: ../../library/functions.rst:1179
msgid ""
"On Windows, opening a console buffer may return a subclass of :class:`io."
"RawIOBase` other than :class:`io.FileIO`."
msgstr ""
"在 Windows 上，開啟一個控制臺緩衝區可能會返回 :class:`io.RawIOBase` 的子類"
"別，而不是 :class:`io.FileIO`。"

#: ../../library/functions.rst:1184
msgid ""
"Given a string representing one Unicode character, return an integer "
"representing the Unicode code point of that character.  For example, "
"``ord('a')`` returns the integer ``97`` and ``ord('€')`` (Euro sign) returns "
"``8364``.  This is the inverse of :func:`chr`."
msgstr ""
"對於代表單個 Unicode 字元的字串，返回代表它 Unicode 編碼位置的整數。例如 "
"``ord('a')`` 返回整數 ``97``、 ``ord('€')`` （歐元符合）返回 ``8364`` 。這"
"是 :func:`chr` 的逆函式。"

#: ../../library/functions.rst:1192
msgid ""
"Return *x* to the power *y*; if *z* is present, return *x* to the power *y*, "
"modulo *z* (computed more efficiently than ``pow(x, y) % z``). The two-"
"argument form ``pow(x, y)`` is equivalent to using the power operator: "
"``x**y``."
msgstr ""
"返回 *x* 的 *y* 次方；如果 *z* 存在，則返回 *x* 的 *y* 次方對 *z* 取餘數（比"
"直接 ``pow(x, y) % z`` 計算更高效）。兩個引數形式的 ``pow(x, y)`` 等價於次方"
"運算子： ``x**y``。"

#: ../../library/functions.rst:1196
msgid ""
"The arguments must have numeric types.  With mixed operand types, the "
"coercion rules for binary arithmetic operators apply.  For :class:`int` "
"operands, the result has the same type as the operands (after coercion) "
"unless the second argument is negative; in that case, all arguments are "
"converted to float and a float result is delivered.  For example, ``10**2`` "
"returns ``100``, but ``10**-2`` returns ``0.01``.  If the second argument is "
"negative, the third argument must be omitted.  If *z* is present, *x* and "
"*y* must be of integer types, and *y* must be non-negative."
msgstr ""

#: ../../library/functions.rst:1208
msgid ""
"Print *objects* to the text stream *file*, separated by *sep* and followed "
"by *end*.  *sep*, *end*, *file* and *flush*, if present, must be given as "
"keyword arguments."
msgstr ""

#: ../../library/functions.rst:1212
msgid ""
"All non-keyword arguments are converted to strings like :func:`str` does and "
"written to the stream, separated by *sep* and followed by *end*.  Both *sep* "
"and *end* must be strings; they can also be ``None``, which means to use the "
"default values.  If no *objects* are given, :func:`print` will just write "
"*end*."
msgstr ""

#: ../../library/functions.rst:1218
msgid ""
"The *file* argument must be an object with a ``write(string)`` method; if it "
"is not present or ``None``, :data:`sys.stdout` will be used.  Since printed "
"arguments are converted to text strings, :func:`print` cannot be used with "
"binary mode file objects.  For these, use ``file.write(...)`` instead."
msgstr ""

#: ../../library/functions.rst:1223
msgid ""
"Whether output is buffered is usually determined by *file*, but if the "
"*flush* keyword argument is true, the stream is forcibly flushed."
msgstr ""

#: ../../library/functions.rst:1226
msgid "Added the *flush* keyword argument."
msgstr "增加了 *flush* 關鍵字引數。"

#: ../../library/functions.rst:1232
msgid "Return a property attribute."
msgstr "返回 property 屬性。"

#: ../../library/functions.rst:1234
msgid ""
"*fget* is a function for getting an attribute value.  *fset* is a function "
"for setting an attribute value. *fdel* is a function for deleting an "
"attribute value.  And *doc* creates a docstring for the attribute."
msgstr ""

#: ../../library/functions.rst:1238
msgid "A typical use is to define a managed attribute ``x``::"
msgstr ""

#: ../../library/functions.rst:1255
msgid ""
"If *c* is an instance of *C*, ``c.x`` will invoke the getter, ``c.x = "
"value`` will invoke the setter and ``del c.x`` the deleter."
msgstr ""

#: ../../library/functions.rst:1258
msgid ""
"If given, *doc* will be the docstring of the property attribute. Otherwise, "
"the property will copy *fget*'s docstring (if it exists).  This makes it "
"possible to create read-only properties easily using :func:`property` as a :"
"term:`decorator`::"
msgstr ""

#: ../../library/functions.rst:1271
msgid ""
"The ``@property`` decorator turns the :meth:`voltage` method into a \"getter"
"\" for a read-only attribute with the same name, and it sets the docstring "
"for *voltage* to \"Get the current voltage.\""
msgstr ""

#: ../../library/functions.rst:1275
msgid ""
"A property object has :attr:`~property.getter`, :attr:`~property.setter`, "
"and :attr:`~property.deleter` methods usable as decorators that create a "
"copy of the property with the corresponding accessor function set to the "
"decorated function.  This is best explained with an example::"
msgstr ""

#: ../../library/functions.rst:1297
msgid ""
"This code is exactly equivalent to the first example.  Be sure to give the "
"additional functions the same name as the original property (``x`` in this "
"case.)"
msgstr ""

#: ../../library/functions.rst:1301
msgid ""
"The returned property object also has the attributes ``fget``, ``fset``, and "
"``fdel`` corresponding to the constructor arguments."
msgstr ""

#: ../../library/functions.rst:1304
msgid "The docstrings of property objects are now writeable."
msgstr ""

#: ../../library/functions.rst:1313
msgid ""
"Rather than being a function, :class:`range` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-range` and :ref:`typesseq`."
msgstr ""

#: ../../library/functions.rst:1319
msgid ""
"Return a string containing a printable representation of an object.  For "
"many types, this function makes an attempt to return a string that would "
"yield an object with the same value when passed to :func:`eval`, otherwise "
"the representation is a string enclosed in angle brackets that contains the "
"name of the type of the object together with additional information often "
"including the name and address of the object.  A class can control what this "
"function returns for its instances by defining a :meth:`__repr__` method."
msgstr ""

#: ../../library/functions.rst:1330
msgid ""
"Return a reverse :term:`iterator`.  *seq* must be an object which has a :"
"meth:`__reversed__` method or supports the sequence protocol (the :meth:"
"`__len__` method and the :meth:`__getitem__` method with integer arguments "
"starting at ``0``)."
msgstr ""

#: ../../library/functions.rst:1338
msgid ""
"Return *number* rounded to *ndigits* precision after the decimal point.  If "
"*ndigits* is omitted or is ``None``, it returns the nearest integer to its "
"input."
msgstr ""

#: ../../library/functions.rst:1342
msgid ""
"For the built-in types supporting :func:`round`, values are rounded to the "
"closest multiple of 10 to the power minus *ndigits*; if two multiples are "
"equally close, rounding is done toward the even choice (so, for example, "
"both ``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is "
"``2``).  Any integer value is valid for *ndigits* (positive, zero, or "
"negative).  The return value is an integer if *ndigits* is omitted or "
"``None``. Otherwise the return value has the same type as *number*."
msgstr ""

#: ../../library/functions.rst:1351
msgid ""
"For a general Python object ``number``, ``round`` delegates to ``number."
"__round__``."
msgstr ""

#: ../../library/functions.rst:1356
msgid ""
"The behavior of :func:`round` for floats can be surprising: for example, "
"``round(2.675, 2)`` gives ``2.67`` instead of the expected ``2.68``. This is "
"not a bug: it's a result of the fact that most decimal fractions can't be "
"represented exactly as a float.  See :ref:`tut-fp-issues` for more "
"information."
msgstr ""

#: ../../library/functions.rst:1367
msgid ""
"Return a new :class:`set` object, optionally with elements taken from "
"*iterable*.  ``set`` is a built-in class.  See :class:`set` and :ref:`types-"
"set` for documentation about this class."
msgstr ""

#: ../../library/functions.rst:1371
msgid ""
"For other containers see the built-in :class:`frozenset`, :class:`list`, :"
"class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections` "
"module."
msgstr ""

#: ../../library/functions.rst:1378
msgid ""
"This is the counterpart of :func:`getattr`.  The arguments are an object, a "
"string and an arbitrary value.  The string may name an existing attribute or "
"a new attribute.  The function assigns the value to the attribute, provided "
"the object allows it.  For example, ``setattr(x, 'foobar', 123)`` is "
"equivalent to ``x.foobar = 123``."
msgstr ""

#: ../../library/functions.rst:1390
msgid ""
"Return a :term:`slice` object representing the set of indices specified by "
"``range(start, stop, step)``.  The *start* and *step* arguments default to "
"``None``.  Slice objects have read-only data attributes :attr:`~slice."
"start`, :attr:`~slice.stop` and :attr:`~slice.step` which merely return the "
"argument values (or their default).  They have no other explicit "
"functionality; however they are used by Numerical Python and other third "
"party extensions. Slice objects are also generated when extended indexing "
"syntax is used.  For example: ``a[start:stop:step]`` or ``a[start:stop, "
"i]``.  See :func:`itertools.islice` for an alternate version that returns an "
"iterator."
msgstr ""

#: ../../library/functions.rst:1403
msgid "Return a new sorted list from the items in *iterable*."
msgstr ""

#: ../../library/functions.rst:1405
msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr "有兩個選擇性參數，只能使用關鍵字參數指定。"

#: ../../library/functions.rst:1407
msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each list element: ``key=str.lower``.  The default value "
"is ``None`` (compare the elements directly)."
msgstr ""

#: ../../library/functions.rst:1411
msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""

#: ../../library/functions.rst:1414
msgid ""
"Use :func:`functools.cmp_to_key` to convert an old-style *cmp* function to a "
"*key* function."
msgstr ""

#: ../../library/functions.rst:1417
msgid ""
"The built-in :func:`sorted` function is guaranteed to be stable. A sort is "
"stable if it guarantees not to change the relative order of elements that "
"compare equal --- this is helpful for sorting in multiple passes (for "
"example, sort by department, then by salary grade)."
msgstr ""

#: ../../library/functions.rst:1422
msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""

#: ../../library/functions.rst:1426
msgid "Transform a method into a static method."
msgstr ""

#: ../../library/functions.rst:1428
msgid ""
"A static method does not receive an implicit first argument. To declare a "
"static method, use this idiom::"
msgstr ""

#: ../../library/functions.rst:1435
msgid ""
"The ``@staticmethod`` form is a function :term:`decorator` -- see the "
"description of function definitions in :ref:`function` for details."
msgstr ""

#: ../../library/functions.rst:1438
msgid ""
"It can be called either on the class (such as ``C.f()``) or on an instance "
"(such as ``C().f()``).  The instance is ignored except for its class."
msgstr ""

#: ../../library/functions.rst:1441
msgid ""
"Static methods in Python are similar to those found in Java or C++. Also "
"see :func:`classmethod` for a variant that is useful for creating alternate "
"class constructors."
msgstr ""

#: ../../library/functions.rst:1445
msgid ""
"Like all decorators, it is also possible to call ``staticmethod`` as a "
"regular function and do something with its result.  This is needed in some "
"cases where you need a reference to a function from a class body and you "
"want to avoid the automatic transformation to instance method.  For these "
"cases, use this idiom::"
msgstr ""

#: ../../library/functions.rst:1454
msgid ""
"For more information on static methods, consult the documentation on the "
"standard type hierarchy in :ref:`types`."
msgstr ""

#: ../../library/functions.rst:1466
msgid ""
"Return a :class:`str` version of *object*.  See :func:`str` for details."
msgstr ""

#: ../../library/functions.rst:1468
msgid ""
"``str`` is the built-in string :term:`class`.  For general information about "
"strings, see :ref:`textseq`."
msgstr ""

#: ../../library/functions.rst:1474
msgid ""
"Sums *start* and the items of an *iterable* from left to right and returns "
"the total.  *start* defaults to ``0``. The *iterable*'s items are normally "
"numbers, and the start value is not allowed to be a string."
msgstr ""

#: ../../library/functions.rst:1478
msgid ""
"For some use cases, there are good alternatives to :func:`sum`. The "
"preferred, fast way to concatenate a sequence of strings is by calling ``''."
"join(sequence)``.  To add floating point values with extended precision, "
"see :func:`math.fsum`\\.  To concatenate a series of iterables, consider "
"using :func:`itertools.chain`."
msgstr ""

#: ../../library/functions.rst:1486
msgid ""
"Return a proxy object that delegates method calls to a parent or sibling "
"class of *type*.  This is useful for accessing inherited methods that have "
"been overridden in a class. The search order is same as that used by :func:"
"`getattr` except that the *type* itself is skipped."
msgstr ""

#: ../../library/functions.rst:1491
msgid ""
"The :attr:`~class.__mro__` attribute of the *type* lists the method "
"resolution search order used by both :func:`getattr` and :func:`super`.  The "
"attribute is dynamic and can change whenever the inheritance hierarchy is "
"updated."
msgstr ""

#: ../../library/functions.rst:1496
msgid ""
"If the second argument is omitted, the super object returned is unbound.  If "
"the second argument is an object, ``isinstance(obj, type)`` must be true.  "
"If the second argument is a type, ``issubclass(type2, type)`` must be true "
"(this is useful for classmethods)."
msgstr ""

#: ../../library/functions.rst:1501
msgid ""
"There are two typical use cases for *super*.  In a class hierarchy with "
"single inheritance, *super* can be used to refer to parent classes without "
"naming them explicitly, thus making the code more maintainable.  This use "
"closely parallels the use of *super* in other programming languages."
msgstr ""

#: ../../library/functions.rst:1506
msgid ""
"The second use case is to support cooperative multiple inheritance in a "
"dynamic execution environment.  This use case is unique to Python and is not "
"found in statically compiled languages or languages that only support single "
"inheritance.  This makes it possible to implement \"diamond diagrams\" where "
"multiple base classes implement the same method.  Good design dictates that "
"this method have the same calling signature in every case (because the order "
"of calls is determined at runtime, because that order adapts to changes in "
"the class hierarchy, and because that order can include sibling classes that "
"are unknown prior to runtime)."
msgstr ""

#: ../../library/functions.rst:1516
msgid "For both use cases, a typical superclass call looks like this::"
msgstr ""

#: ../../library/functions.rst:1523
msgid ""
"Note that :func:`super` is implemented as part of the binding process for "
"explicit dotted attribute lookups such as ``super().__getitem__(name)``. It "
"does so by implementing its own :meth:`__getattribute__` method for "
"searching classes in a predictable order that supports cooperative multiple "
"inheritance. Accordingly, :func:`super` is undefined for implicit lookups "
"using statements or operators such as ``super()[name]``."
msgstr ""

#: ../../library/functions.rst:1530
msgid ""
"Also note that, aside from the zero argument form, :func:`super` is not "
"limited to use inside methods.  The two argument form specifies the "
"arguments exactly and makes the appropriate references.  The zero argument "
"form only works inside a class definition, as the compiler fills in the "
"necessary details to correctly retrieve the class being defined, as well as "
"accessing the current instance for ordinary methods."
msgstr ""

#: ../../library/functions.rst:1537
msgid ""
"For practical suggestions on how to design cooperative classes using :func:"
"`super`, see `guide to using super() <https://rhettinger.wordpress."
"com/2011/05/26/super-considered-super/>`_."
msgstr ""

#: ../../library/functions.rst:1546
msgid ""
"Rather than being a function, :class:`tuple` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-tuple` and :ref:`typesseq`."
msgstr ""

#: ../../library/functions.rst:1555
msgid ""
"With one argument, return the type of an *object*.  The return value is a "
"type object and generally the same object as returned by :attr:`object."
"__class__ <instance.__class__>`."
msgstr ""

#: ../../library/functions.rst:1559
msgid ""
"The :func:`isinstance` built-in function is recommended for testing the type "
"of an object, because it takes subclasses into account."
msgstr ""

#: ../../library/functions.rst:1563
msgid ""
"With three arguments, return a new type object.  This is essentially a "
"dynamic form of the :keyword:`class` statement. The *name* string is the "
"class name and becomes the :attr:`~definition.__name__` attribute; the "
"*bases* tuple itemizes the base classes and becomes the :attr:`~class."
"__bases__` attribute; and the *dict* dictionary is the namespace containing "
"definitions for class body and is copied to a standard dictionary to become "
"the :attr:`~object.__dict__` attribute.  For example, the following two "
"statements create identical :class:`type` objects:"
msgstr ""

#: ../../library/functions.rst:1577
msgid "See also :ref:`bltin-type-objects`."
msgstr ""

#: ../../library/functions.rst:1579
msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""

#: ../../library/functions.rst:1585
msgid ""
"Return the :attr:`~object.__dict__` attribute for a module, class, instance, "
"or any other object with a :attr:`~object.__dict__` attribute."
msgstr ""

#: ../../library/functions.rst:1588
msgid ""
"Objects such as modules and instances have an updateable :attr:`~object."
"__dict__` attribute; however, other objects may have write restrictions on "
"their :attr:`~object.__dict__` attributes (for example, classes use a :class:"
"`types.MappingProxyType` to prevent direct dictionary updates)."
msgstr ""

#: ../../library/functions.rst:1593
msgid ""
"Without an argument, :func:`vars` acts like :func:`locals`.  Note, the "
"locals dictionary is only useful for reads since updates to the locals "
"dictionary are ignored."
msgstr ""

#: ../../library/functions.rst:1600
msgid "Make an iterator that aggregates elements from each of the iterables."
msgstr ""

#: ../../library/functions.rst:1602
msgid ""
"Returns an iterator of tuples, where the *i*-th tuple contains the *i*-th "
"element from each of the argument sequences or iterables.  The iterator "
"stops when the shortest input iterable is exhausted. With a single iterable "
"argument, it returns an iterator of 1-tuples.  With no arguments, it returns "
"an empty iterator.  Equivalent to::"
msgstr ""

#: ../../library/functions.rst:1621
msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``zip(*[iter(s)]*n)``.  This repeats the *same* iterator ``n`` times "
"so that each output tuple has the result of ``n`` calls to the iterator. "
"This has the effect of dividing the input into n-length chunks."
msgstr ""

#: ../../library/functions.rst:1627
msgid ""
":func:`zip` should only be used with unequal length inputs when you don't "
"care about trailing, unmatched values from the longer iterables.  If those "
"values are important, use :func:`itertools.zip_longest` instead."
msgstr ""

#: ../../library/functions.rst:1631
msgid ""
":func:`zip` in conjunction with the ``*`` operator can be used to unzip a "
"list::"
msgstr ""

#: ../../library/functions.rst:1652
msgid ""
"This is an advanced function that is not needed in everyday Python "
"programming, unlike :func:`importlib.import_module`."
msgstr ""

#: ../../library/functions.rst:1655
msgid ""
"This function is invoked by the :keyword:`import` statement.  It can be "
"replaced (by importing the :mod:`builtins` module and assigning to "
"``builtins.__import__``) in order to change semantics of the :keyword:"
"`import` statement, but doing so is **strongly** discouraged as it is "
"usually simpler to use import hooks (see :pep:`302`) to attain the same "
"goals and does not cause issues with code which assumes the default import "
"implementation is in use.  Direct use of :func:`__import__` is also "
"discouraged in favor of :func:`importlib.import_module`."
msgstr ""

#: ../../library/functions.rst:1664
msgid ""
"The function imports the module *name*, potentially using the given "
"*globals* and *locals* to determine how to interpret the name in a package "
"context. The *fromlist* gives the names of objects or submodules that should "
"be imported from the module given by *name*.  The standard implementation "
"does not use its *locals* argument at all, and uses its *globals* only to "
"determine the package context of the :keyword:`import` statement."
msgstr ""

#: ../../library/functions.rst:1671
msgid ""
"*level* specifies whether to use absolute or relative imports. ``0`` (the "
"default) means only perform absolute imports.  Positive values for *level* "
"indicate the number of parent directories to search relative to the "
"directory of the module calling :func:`__import__` (see :pep:`328` for the "
"details)."
msgstr ""

#: ../../library/functions.rst:1677
msgid ""
"When the *name* variable is of the form ``package.module``, normally, the "
"top-level package (the name up till the first dot) is returned, *not* the "
"module named by *name*.  However, when a non-empty *fromlist* argument is "
"given, the module named by *name* is returned."
msgstr ""

#: ../../library/functions.rst:1682
msgid ""
"For example, the statement ``import spam`` results in bytecode resembling "
"the following code::"
msgstr ""

#: ../../library/functions.rst:1687
msgid "The statement ``import spam.ham`` results in this call::"
msgstr ""

#: ../../library/functions.rst:1691
msgid ""
"Note how :func:`__import__` returns the toplevel module here because this is "
"the object that is bound to a name by the :keyword:`import` statement."
msgstr ""

#: ../../library/functions.rst:1694
msgid ""
"On the other hand, the statement ``from spam.ham import eggs, sausage as "
"saus`` results in ::"
msgstr ""

#: ../../library/functions.rst:1701
msgid ""
"Here, the ``spam.ham`` module is returned from :func:`__import__`.  From "
"this object, the names to import are retrieved and assigned to their "
"respective names."
msgstr ""

#: ../../library/functions.rst:1705
msgid ""
"If you simply want to import a module (potentially within a package) by "
"name, use :func:`importlib.import_module`."
msgstr ""

#: ../../library/functions.rst:1708
msgid ""
"Negative values for *level* are no longer supported (which also changes the "
"default value to 0)."
msgstr ""

#: ../../library/functions.rst:1714
msgid "Footnotes"
msgstr "註解"

#: ../../library/functions.rst:1715
msgid ""
"Note that the parser only accepts the Unix-style end of line convention. If "
"you are reading the code from a file, make sure to use newline conversion "
"mode to convert Windows or Mac-style newlines."
msgstr ""
"解析器只接受 Unix 風格的行結束符。如果您從檔案中讀取程式碼，請確保用換行符轉"
"換模式轉換 Windows 或 Mac 風格的換行符。"
